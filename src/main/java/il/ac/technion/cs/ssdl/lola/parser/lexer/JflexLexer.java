/* The following code was generated by JFlex 1.6.1 */

package il.ac.technion.cs.ssdl.lola.parser.lexer;
import org.jgrapht.experimental.dag.DirectedAcyclicGraph.CycleFoundException;
import il.ac.technion.cs.ssdl.lola.parser.CategoriesHierarchy;
import il.ac.technion.cs.ssdl.lola.parser.Balancing;
import java_cup.runtime.Symbol;
import java.io.IOException;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.1
 * from the specification file <tt>autogenerated.jflex</tt>
 */
public class JflexLexer implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\17\1\114\2\0\1\113\22\0\1\21\1\34\1\75\1\100"+
    "\1\0\1\30\1\31\1\40\1\45\1\46\1\26\1\7\1\37\1\10"+
    "\1\22\1\27\1\73\7\77\2\1\1\41\1\36\1\25\1\24\1\23"+
    "\1\42\1\0\1\104\1\111\1\110\1\3\1\5\1\11\2\2\1\101"+
    "\2\2\1\13\1\105\1\102\1\107\1\106\2\2\1\103\1\2\1\15"+
    "\2\2\1\74\2\2\1\47\1\76\1\50\1\33\1\2\1\0\1\54"+
    "\1\4\1\61\1\53\1\6\1\12\1\63\1\57\1\52\1\2\1\65"+
    "\1\14\1\67\1\62\1\51\1\71\1\112\1\60\1\56\1\55\1\16"+
    "\1\20\1\66\1\64\1\70\1\72\1\43\1\32\1\44\1\35\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uff91\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\3\3\1\4\1\5\3\3\1\6"+
    "\2\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16"+
    "\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26"+
    "\1\27\1\30\1\31\1\32\1\33\1\34\1\35\1\36"+
    "\11\3\1\2\1\1\1\37\2\40\1\0\2\2\1\41"+
    "\4\3\1\42\1\43\1\44\1\45\5\3\1\46\1\0"+
    "\1\47\1\50\1\51\1\52\1\53\1\54\1\55\1\56"+
    "\1\57\1\60\1\61\1\62\1\63\1\64\1\65\1\66"+
    "\1\0\1\67\2\3\1\70\14\3\1\71\2\0\1\72"+
    "\1\0\1\73\1\74\1\0\3\2\1\0\1\41\5\3"+
    "\1\75\5\3\1\0\1\46\1\76\1\77\1\100\1\101"+
    "\1\102\21\3\2\71\1\103\1\0\35\104\1\74\1\41"+
    "\1\0\1\3\1\105\1\106\2\3\1\107\3\3\1\110"+
    "\1\46\1\0\2\3\1\111\13\3\1\112\1\113\1\114"+
    "\1\3\3\71\2\103\14\104\1\115\1\104\1\116\17\104"+
    "\1\117\22\104\1\120\1\3\1\121\1\122\11\3\1\123"+
    "\4\3\1\124\1\125\3\103\14\104\1\126\10\104\1\127"+
    "\2\104\1\130\3\104\1\131\2\104\1\132\1\133\10\104"+
    "\1\134\6\104\1\135\7\104\1\136\3\3\1\137\1\3"+
    "\1\140\1\141\1\142\1\143\1\144\1\145\2\3\3\104"+
    "\1\146\3\104\1\147\2\104\1\150\20\104\1\151\1\152"+
    "\24\104\1\153\1\104\2\3\1\154\1\155\2\3\2\104"+
    "\1\156\46\104\1\157\5\104\1\160\1\161\1\162\1\163"+
    "\1\164\2\104\1\165\4\104\1\166\2\104\1\167\1\104"+
    "\1\170\1\171\1\172\1\104\1\173\1\104\1\174\1\175"+
    "\3\104\1\176\2\104\1\177\2\104\1\200\11\104\1\201"+
    "\7\104\1\202\1\104\1\203\1\104\1\204\3\104\1\205"+
    "\2\104\1\206\1\207\1\210\1\104\1\211\1\0\1\212"+
    "\1\213\1\214\25\104\1\215\2\104\1\216\1\217\1\104"+
    "\1\220\3\104\1\221\1\104\1\222\1\223\1\224\2\104"+
    "\1\225\1\104\1\226\1\227\6\104\1\230\1\104\1\231"+
    "\1\232\1\104\1\233\1\104\1\234\4\104\1\235\14\104"+
    "\1\236\3\104\1\237\1\240\2\104\1\241\1\242";

  private static int [] zzUnpackAction() {
    int [] result = new int[623];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\115\0\232\0\347\0\u0134\0\u0181\0\u01ce\0\u021b"+
    "\0\u0268\0\u02b5\0\u0302\0\115\0\u034f\0\115\0\u039c\0\u03e9"+
    "\0\u0436\0\u0483\0\u04d0\0\u051d\0\u056a\0\u05b7\0\u0604\0\u0651"+
    "\0\u069e\0\115\0\115\0\115\0\u06eb\0\115\0\115\0\115"+
    "\0\115\0\115\0\115\0\115\0\115\0\u0738\0\u0785\0\u07d2"+
    "\0\u081f\0\u086c\0\u08b9\0\u0906\0\u0953\0\u09a0\0\u09ed\0\u0a3a"+
    "\0\u0a87\0\u0ad4\0\115\0\u0b21\0\u0b6e\0\u0bbb\0\u0c08\0\u0c55"+
    "\0\u0ca2\0\u0cef\0\u0d3c\0\115\0\115\0\115\0\115\0\u0d89"+
    "\0\u0dd6\0\u0e23\0\u0e70\0\u0ebd\0\u0f0a\0\u0f57\0\u0fa4\0\115"+
    "\0\115\0\115\0\u0ff1\0\115\0\115\0\115\0\115\0\115"+
    "\0\115\0\115\0\115\0\115\0\115\0\115\0\u103e\0\347"+
    "\0\u108b\0\u10d8\0\u1125\0\u1172\0\u11bf\0\u120c\0\u1259\0\u12a6"+
    "\0\u12f3\0\u1340\0\u138d\0\u13da\0\u1427\0\u1474\0\u14c1\0\u150e"+
    "\0\u155b\0\u0a3a\0\u15a8\0\u15f5\0\u1642\0\u168f\0\u16dc\0\u1729"+
    "\0\115\0\u1776\0\u17c3\0\115\0\u1810\0\u185d\0\u18aa\0\u18f7"+
    "\0\u1944\0\347\0\u1991\0\u19de\0\u1a2b\0\u1a78\0\u1ac5\0\u1b12"+
    "\0\115\0\115\0\115\0\115\0\115\0\347\0\u1b5f\0\u1bac"+
    "\0\u1bf9\0\u1c46\0\u1c93\0\u1ce0\0\u1d2d\0\u1d7a\0\u1dc7\0\u1e14"+
    "\0\u1e61\0\u1eae\0\u1efb\0\u1f48\0\u1f95\0\u1fe2\0\u202f\0\u207c"+
    "\0\u20c9\0\u2116\0\u2163\0\u21b0\0\u21fd\0\u224a\0\u2297\0\u22e4"+
    "\0\u2331\0\u237e\0\u23cb\0\u2418\0\u2465\0\u24b2\0\u24ff\0\u254c"+
    "\0\u2599\0\u25e6\0\u2633\0\u2680\0\u26cd\0\u271a\0\u2767\0\u27b4"+
    "\0\u2801\0\u284e\0\u289b\0\u28e8\0\u2935\0\u2982\0\u29cf\0\u2a1c"+
    "\0\115\0\u2a69\0\u2ab6\0\u2b03\0\347\0\347\0\u2b50\0\u2b9d"+
    "\0\347\0\u2bea\0\u2c37\0\u2c84\0\347\0\u2cd1\0\u2d1e\0\u2d6b"+
    "\0\u2db8\0\347\0\u2e05\0\u2e52\0\u2e9f\0\u2eec\0\u2f39\0\u2f86"+
    "\0\u2fd3\0\u3020\0\u306d\0\u30ba\0\u3107\0\347\0\347\0\347"+
    "\0\u3154\0\u31a1\0\115\0\u31ee\0\u323b\0\u3288\0\u32d5\0\u3322"+
    "\0\u336f\0\u33bc\0\u3409\0\u3456\0\u34a3\0\u34f0\0\u353d\0\u358a"+
    "\0\u35d7\0\u3624\0\u21b0\0\u3671\0\u21b0\0\u36be\0\u370b\0\u3758"+
    "\0\u37a5\0\u37f2\0\u383f\0\u388c\0\u38d9\0\u3926\0\u3973\0\u39c0"+
    "\0\u3a0d\0\u3a5a\0\u3aa7\0\u3af4\0\u21b0\0\u3b41\0\u3b8e\0\u3bdb"+
    "\0\u3c28\0\u3c75\0\u3cc2\0\u3d0f\0\u3d5c\0\u3da9\0\u3df6\0\u3e43"+
    "\0\u3e90\0\u3edd\0\u3f2a\0\u3f77\0\u3fc4\0\u4011\0\u405e\0\347"+
    "\0\u40ab\0\347\0\347\0\u40f8\0\u4145\0\u4192\0\u41df\0\u422c"+
    "\0\u4279\0\u42c6\0\u4313\0\u4360\0\347\0\u43ad\0\u43fa\0\u4447"+
    "\0\u4494\0\347\0\347\0\u44e1\0\115\0\u452e\0\u457b\0\u45c8"+
    "\0\u4615\0\u4662\0\u46af\0\u46fc\0\u4749\0\u4796\0\u47e3\0\u4830"+
    "\0\u487d\0\u48ca\0\u21b0\0\u4917\0\u4964\0\u49b1\0\u49fe\0\u4a4b"+
    "\0\u4a98\0\u4ae5\0\u4b32\0\u4b7f\0\u4bcc\0\u4c19\0\u21b0\0\u4c66"+
    "\0\u4cb3\0\u4d00\0\u21b0\0\u4d4d\0\u4d9a\0\u21b0\0\u21b0\0\u4de7"+
    "\0\u4e34\0\u4e81\0\u4ece\0\u4f1b\0\u4f68\0\u4fb5\0\u5002\0\u504f"+
    "\0\u509c\0\u50e9\0\u5136\0\u5183\0\u51d0\0\u521d\0\u21b0\0\u526a"+
    "\0\u52b7\0\u5304\0\u5351\0\u539e\0\u53eb\0\u5438\0\347\0\u5485"+
    "\0\u54d2\0\u551f\0\347\0\u556c\0\347\0\347\0\347\0\347"+
    "\0\347\0\347\0\u55b9\0\u5606\0\u5653\0\u56a0\0\u56ed\0\u573a"+
    "\0\u5787\0\u57d4\0\u5821\0\u21b0\0\u586e\0\u58bb\0\u21b0\0\u5908"+
    "\0\u5955\0\u59a2\0\u59ef\0\u5a3c\0\u5a89\0\u5ad6\0\u5b23\0\u5b70"+
    "\0\u5bbd\0\u5c0a\0\u5c57\0\u5ca4\0\u5cf1\0\u5d3e\0\u5d8b\0\u21b0"+
    "\0\u5dd8\0\u5e25\0\u5e72\0\u5ebf\0\u5f0c\0\u5f59\0\u5fa6\0\u5ff3"+
    "\0\u6040\0\u608d\0\u60da\0\u6127\0\u6174\0\u61c1\0\u620e\0\u625b"+
    "\0\u62a8\0\u62f5\0\u6342\0\u638f\0\u63dc\0\u21b0\0\u6429\0\u6476"+
    "\0\u64c3\0\347\0\347\0\u6510\0\u655d\0\u65aa\0\u65f7\0\u21b0"+
    "\0\u6644\0\u6691\0\u66de\0\u672b\0\u6778\0\u67c5\0\u6812\0\u685f"+
    "\0\u68ac\0\u68f9\0\u6946\0\u6993\0\u69e0\0\u6a2d\0\u6a7a\0\u6ac7"+
    "\0\u6b14\0\u6b61\0\u6bae\0\u6bfb\0\u6c48\0\u6c95\0\u6ce2\0\u6d2f"+
    "\0\u6d7c\0\u6dc9\0\u6e16\0\u6e63\0\u6eb0\0\u6efd\0\u6f4a\0\u6f97"+
    "\0\u6fe4\0\u7031\0\u707e\0\u70cb\0\u7118\0\u7165\0\u21b0\0\u71b2"+
    "\0\u71ff\0\u724c\0\u7299\0\u72e6\0\347\0\347\0\347\0\347"+
    "\0\u21b0\0\u7333\0\u7380\0\u21b0\0\u73cd\0\u741a\0\u7467\0\u74b4"+
    "\0\u21b0\0\u7501\0\u754e\0\u21b0\0\u759b\0\u21b0\0\u21b0\0\u21b0"+
    "\0\u75e8\0\u21b0\0\u7635\0\u21b0\0\u21b0\0\u7682\0\u76cf\0\u771c"+
    "\0\u21b0\0\u7769\0\u77b6\0\u21b0\0\u7803\0\u7850\0\u789d\0\u78ea"+
    "\0\u7937\0\u7984\0\u79d1\0\u7a1e\0\u7a6b\0\u7ab8\0\u7b05\0\u7b52"+
    "\0\u21b0\0\u7b9f\0\u7bec\0\u7c39\0\u7c86\0\u7cd3\0\u7d20\0\u7d6d"+
    "\0\u21b0\0\u7dba\0\u21b0\0\u7e07\0\u21b0\0\u7e54\0\u7ea1\0\u7eee"+
    "\0\u21b0\0\u7f3b\0\u7f88\0\u21b0\0\u21b0\0\u21b0\0\u7fd5\0\u789d"+
    "\0\u8022\0\u21b0\0\u21b0\0\u21b0\0\u806f\0\u80bc\0\u8109\0\u8156"+
    "\0\u81a3\0\u81f0\0\u823d\0\u828a\0\u82d7\0\u8324\0\u8371\0\u83be"+
    "\0\u840b\0\u8458\0\u84a5\0\u84f2\0\u853f\0\u858c\0\u85d9\0\u8626"+
    "\0\u8673\0\u86c0\0\u870d\0\u875a\0\u21b0\0\u21b0\0\u87a7\0\u21b0"+
    "\0\u87f4\0\u8841\0\u888e\0\u21b0\0\u88db\0\u21b0\0\u21b0\0\u21b0"+
    "\0\u8928\0\u8975\0\u21b0\0\u89c2\0\u21b0\0\u21b0\0\u8a0f\0\u8a5c"+
    "\0\u8aa9\0\u8af6\0\u8b43\0\u8b90\0\u21b0\0\u8bdd\0\u21b0\0\u21b0"+
    "\0\u8c2a\0\u21b0\0\u8c77\0\u21b0\0\u8cc4\0\u8d11\0\u8d5e\0\u8dab"+
    "\0\u21b0\0\u8df8\0\u8e45\0\u8e92\0\u8edf\0\u8f2c\0\u8f79\0\u8fc6"+
    "\0\u9013\0\u9060\0\u90ad\0\u90fa\0\u9147\0\u21b0\0\u9194\0\u91e1"+
    "\0\u922e\0\u21b0\0\u21b0\0\u927b\0\u92c8\0\u21b0\0\u21b0";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[623];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\2\4\1\5\1\4\1\6\1\7\1\10"+
    "\1\4\1\11\1\4\1\12\1\4\1\13\1\14\1\15"+
    "\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25"+
    "\1\26\1\27\1\30\1\31\1\32\1\33\1\34\1\35"+
    "\1\36\1\37\1\40\1\41\1\42\1\43\1\44\1\45"+
    "\1\4\1\46\1\47\1\50\1\51\1\52\1\4\1\53"+
    "\1\54\1\4\1\55\2\4\1\56\4\4\1\57\1\4"+
    "\1\60\1\2\1\3\1\61\12\4\1\62\1\63\116\0"+
    "\1\3\3\0\2\64\4\0\2\65\2\66\3\0\1\67"+
    "\50\0\1\3\3\0\1\3\16\0\6\4\2\0\6\4"+
    "\1\0\1\4\30\0\24\4\2\0\1\4\1\0\12\4"+
    "\3\0\6\4\2\0\6\4\1\0\1\4\30\0\7\4"+
    "\1\70\14\4\2\0\1\4\1\0\12\4\3\0\6\4"+
    "\2\0\3\4\1\71\2\4\1\0\1\4\30\0\11\4"+
    "\1\72\1\4\1\73\10\4\2\0\1\4\1\0\12\4"+
    "\11\0\1\74\14\0\1\75\100\0\1\76\12\0\1\77"+
    "\72\0\6\4\2\0\3\4\1\100\2\4\1\0\1\4"+
    "\30\0\1\101\23\4\2\0\1\4\1\0\12\4\3\0"+
    "\6\4\2\0\6\4\1\0\1\4\30\0\1\102\23\4"+
    "\2\0\1\4\1\0\12\4\3\0\6\4\2\0\6\4"+
    "\1\0\1\4\30\0\11\4\1\103\12\4\2\0\1\4"+
    "\1\0\12\4\3\0\6\4\2\0\6\4\1\0\1\4"+
    "\30\0\1\104\23\4\2\0\1\4\1\0\12\4\3\0"+
    "\1\105\20\0\1\106\50\0\1\105\3\0\1\105\40\0"+
    "\1\107\1\110\114\0\1\111\114\0\1\112\1\113\2\0"+
    "\1\114\110\0\1\115\114\0\1\116\113\0\1\117\1\120"+
    "\114\0\1\121\4\0\1\122\107\0\1\123\5\0\1\124"+
    "\106\0\1\125\114\0\1\126\71\0\6\127\2\0\6\127"+
    "\1\0\1\127\30\0\24\127\2\0\1\127\1\0\12\127"+
    "\3\0\6\4\2\0\1\4\1\130\4\4\1\0\1\4"+
    "\30\0\11\4\1\131\12\4\2\0\1\4\1\0\12\4"+
    "\3\0\5\4\1\132\2\0\6\4\1\0\1\4\30\0"+
    "\1\133\23\4\2\0\1\4\1\0\12\4\3\0\6\4"+
    "\2\0\5\4\1\134\1\0\1\4\30\0\24\4\2\0"+
    "\1\4\1\0\12\4\3\0\6\4\2\0\6\4\1\0"+
    "\1\4\30\0\17\4\1\135\4\4\2\0\1\4\1\0"+
    "\12\4\3\0\6\4\2\0\6\4\1\0\1\4\30\0"+
    "\1\4\1\136\2\4\1\137\1\4\1\140\6\4\1\141"+
    "\6\4\2\0\1\4\1\0\12\4\3\0\5\4\1\142"+
    "\2\0\6\4\1\0\1\4\30\0\24\4\2\0\1\4"+
    "\1\0\12\4\3\0\6\4\2\0\6\4\1\0\1\4"+
    "\30\0\1\143\2\4\1\144\2\4\1\145\15\4\2\0"+
    "\1\4\1\0\12\4\3\0\6\4\2\0\6\4\1\0"+
    "\1\4\30\0\1\146\23\4\2\0\1\4\1\0\12\4"+
    "\3\0\6\4\2\0\6\4\1\0\1\4\30\0\6\4"+
    "\1\147\15\4\2\0\1\4\1\0\12\4\3\0\1\150"+
    "\3\0\2\64\4\0\2\65\2\66\3\0\1\67\41\0"+
    "\1\151\6\0\1\150\1\151\2\0\1\150\15\0\75\152"+
    "\1\153\1\154\16\152\100\0\1\155\130\0\1\63\1\0"+
    "\1\156\5\0\2\157\62\0\1\156\3\0\1\156\30\0"+
    "\2\160\2\161\111\0\2\162\101\0\1\105\3\0\2\163"+
    "\2\0\4\164\56\0\1\105\3\0\1\105\16\0\5\4"+
    "\1\165\2\0\6\4\1\0\1\4\30\0\24\4\2\0"+
    "\1\4\1\0\12\4\3\0\6\4\2\0\6\4\1\0"+
    "\1\4\30\0\5\4\1\166\16\4\2\0\1\4\1\0"+
    "\12\4\3\0\6\4\2\0\5\4\1\167\1\0\1\4"+
    "\30\0\24\4\2\0\1\4\1\0\12\4\3\0\6\4"+
    "\2\0\6\4\1\0\1\4\30\0\4\4\1\170\17\4"+
    "\2\0\1\4\1\0\12\4\3\0\6\4\2\0\6\4"+
    "\1\0\1\4\30\0\1\171\23\4\2\0\1\4\1\0"+
    "\12\4\3\0\6\4\2\0\6\4\1\0\1\4\30\0"+
    "\7\4\1\172\14\4\2\0\1\4\1\0\12\4\3\0"+
    "\6\4\2\0\6\4\1\0\1\4\30\0\11\4\1\173"+
    "\12\4\2\0\1\4\1\0\12\4\3\0\6\4\2\0"+
    "\6\4\1\0\1\4\30\0\1\4\1\174\3\4\1\175"+
    "\16\4\2\0\1\4\1\0\12\4\3\0\6\4\2\0"+
    "\3\4\1\176\2\4\1\0\1\4\30\0\1\4\1\177"+
    "\22\4\2\0\1\4\1\0\12\4\3\0\1\105\3\0"+
    "\2\200\2\0\4\201\56\0\1\105\3\0\1\105\37\0"+
    "\1\202\116\0\1\203\114\0\1\204\130\0\1\205\55\0"+
    "\6\4\2\0\6\4\1\0\1\4\30\0\4\4\1\206"+
    "\17\4\2\0\1\4\1\0\12\4\3\0\6\4\2\0"+
    "\1\4\1\207\4\4\1\0\1\4\30\0\24\4\2\0"+
    "\1\4\1\0\12\4\3\0\6\4\2\0\5\4\1\210"+
    "\1\0\1\4\30\0\24\4\2\0\1\4\1\0\12\4"+
    "\3\0\6\4\2\0\6\4\1\0\1\4\30\0\4\4"+
    "\1\211\17\4\2\0\1\4\1\0\12\4\3\0\6\4"+
    "\2\0\6\4\1\0\1\4\30\0\20\4\1\212\3\4"+
    "\2\0\1\4\1\0\12\4\3\0\6\4\2\0\6\4"+
    "\1\0\1\4\30\0\12\4\1\213\6\4\1\214\2\4"+
    "\2\0\1\4\1\0\12\4\3\0\6\4\2\0\6\4"+
    "\1\0\1\4\30\0\3\4\1\215\3\4\1\216\14\4"+
    "\2\0\1\4\1\0\12\4\3\0\6\4\2\0\6\4"+
    "\1\0\1\4\30\0\1\217\23\4\2\0\1\4\1\0"+
    "\12\4\3\0\6\4\2\0\6\4\1\0\1\4\30\0"+
    "\1\4\1\220\22\4\2\0\1\4\1\0\12\4\3\0"+
    "\6\4\2\0\6\4\1\0\1\4\30\0\4\4\1\221"+
    "\5\4\1\222\11\4\2\0\1\4\1\0\12\4\3\0"+
    "\6\4\2\0\6\4\1\0\1\4\30\0\11\4\1\223"+
    "\12\4\2\0\1\4\1\0\12\4\3\0\6\4\2\0"+
    "\6\4\1\0\1\4\30\0\5\4\1\224\16\4\2\0"+
    "\1\4\1\0\12\4\3\0\6\4\2\0\6\4\1\0"+
    "\1\4\30\0\3\4\1\225\20\4\2\0\1\4\1\0"+
    "\12\4\3\0\6\4\2\0\6\4\1\0\1\4\30\0"+
    "\4\4\1\226\17\4\2\0\1\4\1\0\12\4\3\0"+
    "\6\4\2\0\6\4\1\0\1\4\30\0\1\4\1\227"+
    "\22\4\2\0\1\4\1\0\12\4\3\0\1\150\3\0"+
    "\2\64\4\0\2\230\2\231\3\0\1\67\50\0\1\150"+
    "\3\0\1\150\16\0\1\232\1\0\4\232\2\0\2\232"+
    "\40\0\2\232\4\0\1\232\11\0\1\232\3\0\1\232"+
    "\4\0\1\232\3\0\2\232\100\0\1\152\23\0\1\152"+
    "\5\0\1\152\5\0\1\152\17\0\1\152\1\0\1\152"+
    "\11\0\2\152\2\0\1\152\1\0\1\152\1\0\1\233"+
    "\6\0\1\152\1\0\3\152\17\0\3\234\1\235\1\236"+
    "\2\0\1\237\1\240\1\241\1\242\1\243\1\234\1\0"+
    "\1\234\30\0\1\244\1\245\1\246\1\247\1\234\1\250"+
    "\1\234\1\251\1\252\1\253\1\234\1\254\1\234\1\255"+
    "\2\234\1\256\1\234\1\0\1\257\4\0\1\260\1\261"+
    "\1\262\1\263\1\264\1\265\1\266\1\267\1\270\1\234"+
    "\3\0\1\156\7\0\4\271\56\0\1\156\3\0\1\156"+
    "\16\0\1\156\71\0\1\156\3\0\1\156\32\0\2\161"+
    "\111\0\2\161\101\0\1\272\5\0\2\273\62\0\1\272"+
    "\3\0\1\272\16\0\6\4\2\0\6\4\1\0\1\4"+
    "\30\0\3\4\1\274\20\4\2\0\1\4\1\0\12\4"+
    "\3\0\5\4\1\275\2\0\6\4\1\0\1\4\30\0"+
    "\24\4\2\0\1\4\1\0\12\4\3\0\6\4\2\0"+
    "\6\4\1\0\1\4\30\0\16\4\1\276\5\4\2\0"+
    "\1\4\1\0\12\4\3\0\5\4\1\277\2\0\6\4"+
    "\1\0\1\4\30\0\24\4\2\0\1\4\1\0\12\4"+
    "\3\0\6\4\2\0\6\4\1\0\1\4\30\0\3\4"+
    "\1\300\20\4\2\0\1\4\1\0\12\4\3\0\6\4"+
    "\2\0\6\4\1\0\1\4\30\0\12\4\1\301\11\4"+
    "\2\0\1\4\1\0\12\4\3\0\6\4\2\0\6\4"+
    "\1\0\1\4\30\0\1\302\23\4\2\0\1\4\1\0"+
    "\12\4\3\0\6\4\2\0\6\4\1\0\1\4\30\0"+
    "\1\4\1\303\22\4\2\0\1\4\1\0\12\4\3\0"+
    "\6\4\2\0\6\4\1\0\1\4\30\0\3\4\1\304"+
    "\20\4\2\0\1\4\1\0\12\4\3\0\6\4\2\0"+
    "\6\4\1\0\1\4\30\0\2\4\1\305\21\4\2\0"+
    "\1\4\1\0\12\4\3\0\1\306\5\0\2\307\62\0"+
    "\1\306\3\0\1\306\16\0\6\4\2\0\6\4\1\0"+
    "\1\4\30\0\3\4\1\310\20\4\2\0\1\4\1\0"+
    "\12\4\3\0\3\4\1\311\2\4\2\0\6\4\1\0"+
    "\1\4\30\0\24\4\2\0\1\4\1\0\12\4\3\0"+
    "\6\4\2\0\6\4\1\0\1\4\30\0\1\312\23\4"+
    "\2\0\1\4\1\0\12\4\3\0\5\4\1\313\2\0"+
    "\6\4\1\0\1\4\30\0\24\4\2\0\1\4\1\0"+
    "\12\4\3\0\6\4\2\0\6\4\1\0\1\4\30\0"+
    "\11\4\1\314\12\4\2\0\1\4\1\0\12\4\3\0"+
    "\5\4\1\315\2\0\6\4\1\0\1\4\30\0\24\4"+
    "\2\0\1\4\1\0\12\4\3\0\6\4\2\0\6\4"+
    "\1\0\1\4\30\0\4\4\1\316\17\4\2\0\1\4"+
    "\1\0\12\4\3\0\6\4\2\0\5\4\1\317\1\0"+
    "\1\4\30\0\24\4\2\0\1\4\1\0\12\4\3\0"+
    "\6\4\2\0\6\4\1\0\1\4\30\0\7\4\1\320"+
    "\14\4\2\0\1\4\1\0\12\4\3\0\6\4\2\0"+
    "\6\4\1\0\1\4\30\0\4\4\1\321\17\4\2\0"+
    "\1\4\1\0\12\4\3\0\6\4\2\0\5\4\1\322"+
    "\1\0\1\4\30\0\24\4\2\0\1\4\1\0\12\4"+
    "\3\0\6\4\2\0\6\4\1\0\1\4\30\0\1\4"+
    "\1\323\22\4\2\0\1\4\1\0\12\4\3\0\6\4"+
    "\2\0\6\4\1\0\1\4\30\0\4\4\1\324\1\325"+
    "\16\4\2\0\1\4\1\0\12\4\3\0\5\4\1\326"+
    "\2\0\6\4\1\0\1\4\30\0\24\4\2\0\1\4"+
    "\1\0\12\4\3\0\6\4\2\0\6\4\1\0\1\4"+
    "\30\0\7\4\1\327\14\4\2\0\1\4\1\0\12\4"+
    "\3\0\6\4\2\0\6\4\1\0\1\4\30\0\1\330"+
    "\23\4\2\0\1\4\1\0\12\4\3\0\6\4\2\0"+
    "\3\4\1\331\2\4\1\0\1\4\30\0\24\4\2\0"+
    "\1\4\1\0\12\4\15\0\2\332\2\333\111\0\2\334"+
    "\101\0\1\232\1\0\4\232\2\0\2\232\2\335\2\336"+
    "\34\0\2\232\4\0\1\232\11\0\1\232\3\0\1\232"+
    "\4\0\1\232\3\0\2\232\4\0\1\152\1\0\4\152"+
    "\2\0\2\152\40\0\2\152\4\0\1\152\11\0\1\152"+
    "\3\0\1\152\4\0\1\152\3\0\2\152\5\0\5\234"+
    "\2\0\6\234\1\0\1\234\30\0\22\234\1\0\1\234"+
    "\4\0\12\234\4\0\5\234\2\0\6\234\1\0\1\234"+
    "\30\0\1\234\1\337\7\234\1\340\4\234\1\341\3\234"+
    "\1\0\1\234\4\0\12\234\4\0\5\234\2\0\3\234"+
    "\1\342\2\234\1\0\1\234\30\0\13\234\1\343\6\234"+
    "\1\0\1\234\4\0\12\234\4\0\5\234\2\0\6\234"+
    "\1\0\1\234\30\0\1\344\1\345\20\234\1\0\1\234"+
    "\4\0\12\234\4\0\5\234\2\0\6\234\1\0\1\234"+
    "\30\0\1\346\1\347\20\234\1\0\1\234\4\0\12\234"+
    "\4\0\5\234\2\0\6\234\1\0\1\234\30\0\1\234"+
    "\1\350\20\234\1\0\1\234\4\0\12\234\4\0\5\234"+
    "\2\0\6\234\1\0\1\234\30\0\1\351\21\234\1\0"+
    "\1\234\4\0\12\234\4\0\5\234\2\0\6\234\1\0"+
    "\1\234\30\0\11\234\1\352\10\234\1\0\1\234\4\0"+
    "\12\234\4\0\5\234\2\0\1\234\1\353\4\234\1\0"+
    "\1\234\30\0\4\234\1\354\2\234\1\355\10\234\1\356"+
    "\1\234\1\0\1\234\4\0\12\234\4\0\5\234\2\0"+
    "\1\234\1\357\4\234\1\0\1\234\30\0\22\234\1\0"+
    "\1\234\4\0\12\234\4\0\4\234\1\360\2\0\6\234"+
    "\1\0\1\234\30\0\22\234\1\0\1\234\4\0\12\234"+
    "\4\0\5\234\2\0\6\234\1\0\1\234\30\0\5\234"+
    "\1\361\3\234\1\362\6\234\1\363\1\234\1\0\1\234"+
    "\4\0\12\234\4\0\4\234\1\364\2\0\6\234\1\0"+
    "\1\234\30\0\22\234\1\0\1\234\4\0\12\234\4\0"+
    "\4\234\1\365\2\0\5\234\1\366\1\0\1\234\30\0"+
    "\22\234\1\0\1\234\4\0\12\234\4\0\5\234\2\0"+
    "\3\234\1\367\2\234\1\0\1\234\30\0\22\234\1\0"+
    "\1\234\4\0\12\234\4\0\5\234\2\0\6\234\1\0"+
    "\1\234\30\0\1\370\21\234\1\0\1\234\4\0\12\234"+
    "\4\0\5\234\2\0\6\234\1\0\1\234\30\0\1\371"+
    "\21\234\1\0\1\234\4\0\12\234\4\0\5\234\2\0"+
    "\6\234\1\0\1\234\30\0\1\234\1\372\20\234\1\0"+
    "\1\234\4\0\12\234\4\0\5\234\2\0\6\234\1\0"+
    "\1\234\30\0\7\234\1\373\12\234\1\0\1\234\4\0"+
    "\12\234\4\0\5\234\2\0\6\234\1\0\1\234\30\0"+
    "\1\234\1\374\20\234\1\0\1\234\4\0\12\234\4\0"+
    "\5\234\2\0\1\234\1\375\4\234\1\0\1\234\30\0"+
    "\2\234\1\376\6\234\1\377\4\234\1\u0100\3\234\1\0"+
    "\1\234\4\0\12\234\4\0\4\234\1\u0101\2\0\6\234"+
    "\1\0\1\234\30\0\1\u0102\21\234\1\0\1\234\4\0"+
    "\12\234\4\0\4\234\1\u0103\2\0\5\234\1\u0104\1\0"+
    "\1\234\30\0\1\u0105\2\234\1\u0106\14\234\1\u0107\1\234"+
    "\1\0\1\234\4\0\12\234\4\0\5\234\2\0\6\234"+
    "\1\0\1\234\30\0\11\234\1\u0108\10\234\1\0\1\234"+
    "\4\0\12\234\4\0\5\234\2\0\6\234\1\0\1\234"+
    "\30\0\3\234\1\u0109\16\234\1\0\1\234\4\0\12\234"+
    "\4\0\4\234\1\u010a\2\0\6\234\1\0\1\234\30\0"+
    "\7\234\1\u010b\12\234\1\0\1\234\4\0\12\234\4\0"+
    "\5\234\2\0\6\234\1\0\1\234\30\0\11\234\1\u010c"+
    "\6\234\1\u010d\1\234\1\0\1\234\4\0\12\234\4\0"+
    "\5\234\2\0\6\234\1\0\1\234\30\0\3\234\1\u010e"+
    "\16\234\1\0\1\234\4\0\12\234\4\0\4\234\1\u010f"+
    "\2\0\6\234\1\0\1\234\30\0\22\234\1\0\1\234"+
    "\4\0\12\234\3\0\1\272\7\0\4\164\56\0\1\272"+
    "\3\0\1\272\16\0\1\272\71\0\1\272\3\0\1\272"+
    "\16\0\6\4\2\0\6\4\1\0\1\4\30\0\14\4"+
    "\1\u0110\7\4\2\0\1\4\1\0\12\4\3\0\6\4"+
    "\2\0\6\4\1\0\1\4\30\0\7\4\1\u0111\14\4"+
    "\2\0\1\4\1\0\12\4\3\0\6\4\2\0\6\4"+
    "\1\0\1\4\30\0\4\4\1\u0112\17\4\2\0\1\4"+
    "\1\0\12\4\3\0\6\4\2\0\6\4\1\0\1\4"+
    "\30\0\11\4\1\u0113\12\4\2\0\1\4\1\0\12\4"+
    "\3\0\6\4\2\0\6\4\1\0\1\4\30\0\12\4"+
    "\1\u0114\11\4\2\0\1\4\1\0\12\4\3\0\6\4"+
    "\2\0\6\4\1\0\1\4\30\0\4\4\1\u0115\17\4"+
    "\2\0\1\4\1\0\12\4\3\0\1\306\7\0\4\201"+
    "\56\0\1\306\3\0\1\306\16\0\1\306\71\0\1\306"+
    "\3\0\1\306\16\0\6\4\2\0\5\4\1\u0116\1\0"+
    "\1\4\30\0\24\4\2\0\1\4\1\0\12\4\3\0"+
    "\6\4\2\0\3\4\1\u0117\2\4\1\0\1\4\30\0"+
    "\24\4\2\0\1\4\1\0\12\4\3\0\6\4\2\0"+
    "\6\4\1\0\1\4\30\0\2\4\1\u0118\21\4\2\0"+
    "\1\4\1\0\12\4\3\0\5\4\1\u0119\2\0\6\4"+
    "\1\0\1\4\30\0\24\4\2\0\1\4\1\0\12\4"+
    "\3\0\6\4\2\0\6\4\1\0\1\4\30\0\1\u011a"+
    "\23\4\2\0\1\4\1\0\12\4\3\0\6\4\2\0"+
    "\6\4\1\0\1\4\30\0\1\4\1\u011b\22\4\2\0"+
    "\1\4\1\0\12\4\3\0\6\4\2\0\6\4\1\0"+
    "\1\4\30\0\10\4\1\u011c\13\4\2\0\1\4\1\0"+
    "\12\4\3\0\6\4\2\0\6\4\1\0\1\4\30\0"+
    "\4\4\1\u011d\17\4\2\0\1\4\1\0\12\4\3\0"+
    "\6\4\2\0\6\4\1\0\1\4\30\0\10\4\1\u011e"+
    "\13\4\2\0\1\4\1\0\12\4\3\0\6\4\2\0"+
    "\6\4\1\0\1\4\30\0\7\4\1\u011f\14\4\2\0"+
    "\1\4\1\0\12\4\3\0\6\4\2\0\6\4\1\0"+
    "\1\4\30\0\5\4\1\u0120\16\4\2\0\1\4\1\0"+
    "\12\4\3\0\6\4\2\0\6\4\1\0\1\4\30\0"+
    "\1\4\1\u0121\22\4\2\0\1\4\1\0\12\4\3\0"+
    "\6\4\2\0\6\4\1\0\1\4\30\0\4\4\1\u0122"+
    "\17\4\2\0\1\4\1\0\12\4\3\0\5\4\1\u0123"+
    "\2\0\6\4\1\0\1\4\30\0\24\4\2\0\1\4"+
    "\1\0\12\4\17\0\2\333\111\0\2\333\113\0\2\u0124"+
    "\2\u0125\111\0\2\u0126\102\0\5\234\2\0\6\234\1\0"+
    "\1\234\30\0\4\234\1\u0127\15\234\1\0\1\234\4\0"+
    "\12\234\4\0\5\234\2\0\6\234\1\0\1\234\30\0"+
    "\2\234\1\u0128\17\234\1\0\1\234\4\0\12\234\4\0"+
    "\5\234\2\0\6\234\1\0\1\234\30\0\20\234\1\u0129"+
    "\1\234\1\0\1\234\4\0\12\234\4\0\5\234\2\0"+
    "\6\234\1\0\1\234\30\0\5\234\1\u012a\14\234\1\0"+
    "\1\234\4\0\12\234\4\0\5\234\2\0\6\234\1\0"+
    "\1\234\30\0\3\234\1\u012b\4\234\1\u012c\11\234\1\0"+
    "\1\234\4\0\12\234\4\0\5\234\2\0\6\234\1\0"+
    "\1\234\30\0\7\234\1\u012d\12\234\1\0\1\234\4\0"+
    "\12\234\4\0\5\234\2\0\6\234\1\0\1\234\30\0"+
    "\11\234\1\u012e\10\234\1\0\1\234\4\0\12\234\4\0"+
    "\5\234\2\0\3\234\1\u012f\2\234\1\0\1\234\30\0"+
    "\22\234\1\0\1\234\4\0\12\234\4\0\5\234\2\0"+
    "\3\234\1\u0130\2\234\1\0\1\234\30\0\11\234\1\u0131"+
    "\10\234\1\0\1\234\4\0\12\234\4\0\5\234\2\0"+
    "\6\234\1\0\1\234\30\0\4\234\1\u0132\15\234\1\0"+
    "\1\234\4\0\12\234\4\0\5\234\2\0\6\234\1\0"+
    "\1\234\30\0\12\234\1\u0133\7\234\1\0\1\234\4\0"+
    "\12\234\4\0\2\234\1\u0134\2\234\2\0\3\234\1\u0135"+
    "\2\234\1\0\1\234\30\0\22\234\1\0\1\234\4\0"+
    "\12\234\4\0\5\234\2\0\6\234\1\0\1\234\30\0"+
    "\6\234\1\u0136\13\234\1\0\1\234\4\0\12\234\4\0"+
    "\4\234\1\u0137\2\0\6\234\1\0\1\234\30\0\22\234"+
    "\1\0\1\234\4\0\12\234\4\0\5\234\2\0\6\234"+
    "\1\0\1\234\30\0\22\234\1\0\1\234\4\0\1\234"+
    "\1\u0138\10\234\4\0\5\234\2\0\3\234\1\u0139\2\234"+
    "\1\0\1\234\30\0\5\234\1\u013a\14\234\1\0\1\234"+
    "\4\0\12\234\4\0\5\234\2\0\6\234\1\0\1\234"+
    "\30\0\5\234\1\u013b\14\234\1\0\1\234\4\0\12\234"+
    "\4\0\5\234\2\0\6\234\1\0\1\234\30\0\2\234"+
    "\1\u013c\5\234\1\u013d\11\234\1\0\1\234\4\0\12\234"+
    "\4\0\5\234\2\0\6\234\1\0\1\234\30\0\20\234"+
    "\1\u013e\1\234\1\0\1\234\4\0\12\234\4\0\4\234"+
    "\1\u013f\2\0\6\234\1\0\1\234\30\0\20\234\1\u0140"+
    "\1\234\1\0\1\234\4\0\12\234\4\0\5\234\2\0"+
    "\6\234\1\0\1\234\30\0\5\234\1\u0141\12\234\1\u0142"+
    "\1\234\1\0\1\234\4\0\12\234\4\0\5\234\2\0"+
    "\6\234\1\0\1\234\30\0\11\234\1\u0143\10\234\1\0"+
    "\1\234\4\0\12\234\4\0\5\234\2\0\6\234\1\0"+
    "\1\234\30\0\1\u0144\21\234\1\0\1\234\4\0\12\234"+
    "\4\0\5\234\2\0\6\234\1\0\1\234\30\0\4\234"+
    "\1\u0145\2\234\1\u0146\12\234\1\0\1\234\4\0\12\234"+
    "\4\0\5\234\2\0\6\234\1\0\1\234\30\0\7\234"+
    "\1\u0147\12\234\1\0\1\234\4\0\12\234\4\0\5\234"+
    "\2\0\6\234\1\0\1\234\30\0\4\234\1\u0148\15\234"+
    "\1\0\1\234\4\0\12\234\4\0\4\234\1\u0149\2\0"+
    "\6\234\1\0\1\234\30\0\22\234\1\0\1\234\4\0"+
    "\12\234\4\0\5\234\2\0\6\234\1\0\1\234\30\0"+
    "\4\234\1\u014a\15\234\1\0\1\234\4\0\12\234\4\0"+
    "\4\234\1\u014b\2\0\6\234\1\0\1\234\30\0\22\234"+
    "\1\0\1\234\4\0\12\234\4\0\5\234\2\0\6\234"+
    "\1\0\1\234\30\0\10\234\1\u014c\11\234\1\0\1\234"+
    "\4\0\12\234\4\0\5\234\2\0\6\234\1\0\1\234"+
    "\30\0\20\234\1\u014d\1\234\1\0\1\234\4\0\12\234"+
    "\4\0\5\234\2\0\6\234\1\0\1\234\30\0\1\234"+
    "\1\u014e\13\234\1\u014f\4\234\1\0\1\234\4\0\12\234"+
    "\4\0\5\234\2\0\6\234\1\0\1\234\30\0\4\234"+
    "\1\u0150\4\234\1\u0151\10\234\1\0\1\234\4\0\12\234"+
    "\4\0\5\234\2\0\6\234\1\0\1\234\30\0\22\234"+
    "\1\0\1\234\4\0\11\234\1\u0152\4\0\2\234\1\u0153"+
    "\2\234\2\0\6\234\1\0\1\234\30\0\22\234\1\0"+
    "\1\234\4\0\12\234\4\0\5\234\2\0\6\234\1\0"+
    "\1\234\30\0\16\234\1\u0154\3\234\1\0\1\234\4\0"+
    "\12\234\4\0\5\234\2\0\6\234\1\0\1\234\30\0"+
    "\16\234\1\u0155\3\234\1\0\1\234\4\0\12\234\4\0"+
    "\5\234\2\0\3\234\1\u0156\2\234\1\0\1\234\30\0"+
    "\22\234\1\0\1\234\4\0\12\234\4\0\5\234\2\0"+
    "\6\234\1\0\1\234\30\0\17\234\1\u0157\2\234\1\0"+
    "\1\234\4\0\12\234\4\0\5\234\2\0\6\234\1\0"+
    "\1\234\30\0\4\234\1\u0158\15\234\1\0\1\234\4\0"+
    "\12\234\4\0\5\234\2\0\6\234\1\0\1\234\30\0"+
    "\7\234\1\u0159\12\234\1\0\1\234\4\0\12\234\4\0"+
    "\5\234\2\0\6\234\1\0\1\234\30\0\1\u015a\21\234"+
    "\1\0\1\234\4\0\12\234\4\0\4\234\1\u015b\2\0"+
    "\6\234\1\0\1\234\30\0\22\234\1\0\1\234\4\0"+
    "\12\234\4\0\5\234\2\0\6\234\1\0\1\234\30\0"+
    "\4\234\1\u015c\15\234\1\0\1\234\4\0\12\234\4\0"+
    "\5\234\2\0\6\234\1\0\1\234\30\0\5\234\1\u015d"+
    "\14\234\1\0\1\234\4\0\12\234\4\0\5\234\2\0"+
    "\6\234\1\0\1\234\30\0\12\234\1\u015e\7\234\1\0"+
    "\1\234\4\0\12\234\3\0\6\4\2\0\6\4\1\0"+
    "\1\4\30\0\11\4\1\u015f\12\4\2\0\1\4\1\0"+
    "\12\4\3\0\6\4\2\0\6\4\1\0\1\4\30\0"+
    "\11\4\1\u0160\12\4\2\0\1\4\1\0\12\4\3\0"+
    "\6\4\2\0\6\4\1\0\1\4\30\0\1\4\1\u0161"+
    "\22\4\2\0\1\4\1\0\12\4\3\0\6\4\2\0"+
    "\3\4\1\u0162\2\4\1\0\1\4\30\0\24\4\2\0"+
    "\1\4\1\0\12\4\3\0\5\4\1\u0163\2\0\6\4"+
    "\1\0\1\4\30\0\24\4\2\0\1\4\1\0\12\4"+
    "\3\0\5\4\1\u0164\2\0\6\4\1\0\1\4\30\0"+
    "\24\4\2\0\1\4\1\0\12\4\3\0\6\4\2\0"+
    "\6\4\1\0\1\4\30\0\2\4\1\u0165\21\4\2\0"+
    "\1\4\1\0\12\4\3\0\6\4\2\0\1\4\1\u0166"+
    "\4\4\1\0\1\4\30\0\24\4\2\0\1\4\1\0"+
    "\12\4\3\0\6\4\2\0\6\4\1\0\1\4\30\0"+
    "\10\4\1\u0167\13\4\2\0\1\4\1\0\12\4\3\0"+
    "\6\4\2\0\6\4\1\0\1\4\30\0\4\4\1\u0168"+
    "\17\4\2\0\1\4\1\0\12\4\3\0\6\4\2\0"+
    "\6\4\1\0\1\4\30\0\6\4\1\u0169\15\4\2\0"+
    "\1\4\1\0\12\4\3\0\6\4\2\0\6\4\1\0"+
    "\1\4\30\0\11\4\1\u016a\12\4\2\0\1\4\1\0"+
    "\12\4\3\0\6\4\2\0\6\4\1\0\1\4\30\0"+
    "\4\4\1\u016b\17\4\2\0\1\4\1\0\12\4\3\0"+
    "\6\4\2\0\6\4\1\0\1\4\30\0\11\4\1\u016c"+
    "\12\4\2\0\1\4\1\0\12\4\17\0\2\u0125\111\0"+
    "\2\u0125\102\0\5\234\2\0\6\234\1\0\1\234\30\0"+
    "\6\234\1\u016d\13\234\1\0\1\234\4\0\12\234\4\0"+
    "\5\234\2\0\6\234\1\0\1\234\30\0\22\234\1\0"+
    "\1\234\4\0\6\234\1\u016e\3\234\4\0\5\234\2\0"+
    "\6\234\1\0\1\234\30\0\4\234\1\u016f\15\234\1\0"+
    "\1\234\4\0\12\234\4\0\4\234\1\u0170\2\0\6\234"+
    "\1\0\1\234\30\0\22\234\1\0\1\234\4\0\12\234"+
    "\4\0\5\234\2\0\6\234\1\0\1\234\30\0\16\234"+
    "\1\u0171\3\234\1\0\1\234\4\0\12\234\4\0\4\234"+
    "\1\u0172\2\0\6\234\1\0\1\234\30\0\22\234\1\0"+
    "\1\234\4\0\12\234\4\0\3\234\1\u0173\1\234\2\0"+
    "\6\234\1\0\1\234\30\0\22\234\1\0\1\234\4\0"+
    "\12\234\4\0\5\234\2\0\6\234\1\0\1\234\30\0"+
    "\2\234\1\u0174\17\234\1\0\1\234\4\0\12\234\4\0"+
    "\5\234\2\0\3\234\1\u0175\2\234\1\0\1\234\30\0"+
    "\22\234\1\0\1\234\4\0\12\234\4\0\5\234\2\0"+
    "\6\234\1\0\1\234\30\0\4\234\1\u0176\15\234\1\0"+
    "\1\234\4\0\12\234\4\0\5\234\2\0\6\234\1\0"+
    "\1\234\30\0\2\234\1\u0177\17\234\1\0\1\234\4\0"+
    "\12\234\4\0\4\234\1\u0178\2\0\6\234\1\0\1\234"+
    "\30\0\22\234\1\0\1\234\4\0\12\234\4\0\5\234"+
    "\2\0\6\234\1\0\1\234\30\0\3\234\1\u0179\16\234"+
    "\1\0\1\234\4\0\12\234\4\0\4\234\1\u017a\2\0"+
    "\6\234\1\0\1\234\30\0\22\234\1\0\1\234\4\0"+
    "\12\234\4\0\4\234\1\u017b\2\0\6\234\1\0\1\234"+
    "\30\0\22\234\1\0\1\234\4\0\12\234\4\0\5\234"+
    "\2\0\6\234\1\0\1\234\30\0\11\234\1\u017c\10\234"+
    "\1\0\1\234\4\0\12\234\4\0\5\234\2\0\6\234"+
    "\1\0\1\234\30\0\1\u017d\21\234\1\0\1\234\4\0"+
    "\12\234\4\0\4\234\1\u017e\2\0\6\234\1\0\1\234"+
    "\30\0\22\234\1\0\1\234\4\0\12\234\4\0\5\234"+
    "\2\0\6\234\1\0\1\234\30\0\10\234\1\u017f\11\234"+
    "\1\0\1\234\4\0\12\234\4\0\4\234\1\u0180\2\0"+
    "\6\234\1\0\1\234\30\0\22\234\1\0\1\234\4\0"+
    "\12\234\4\0\5\234\2\0\6\234\1\0\1\234\30\0"+
    "\22\234\1\0\1\234\4\0\3\234\1\u0181\6\234\4\0"+
    "\5\234\2\0\6\234\1\0\1\234\30\0\6\234\1\u0182"+
    "\13\234\1\0\1\234\4\0\12\234\4\0\4\234\1\u0183"+
    "\2\0\6\234\1\0\1\234\30\0\22\234\1\0\1\234"+
    "\4\0\12\234\4\0\5\234\2\0\6\234\1\0\1\234"+
    "\30\0\3\234\1\u0184\16\234\1\0\1\234\4\0\12\234"+
    "\4\0\5\234\2\0\5\234\1\u0185\1\0\1\234\30\0"+
    "\22\234\1\0\1\234\4\0\12\234\4\0\5\234\2\0"+
    "\3\234\1\u0186\2\234\1\0\1\234\30\0\22\234\1\0"+
    "\1\234\4\0\12\234\4\0\5\234\2\0\6\234\1\0"+
    "\1\234\30\0\5\234\1\u0187\14\234\1\0\1\234\4\0"+
    "\12\234\4\0\4\234\1\u0188\2\0\6\234\1\0\1\234"+
    "\30\0\22\234\1\0\1\234\4\0\12\234\4\0\5\234"+
    "\2\0\6\234\1\0\1\234\30\0\6\234\1\u0189\13\234"+
    "\1\0\1\234\4\0\12\234\4\0\5\234\2\0\6\234"+
    "\1\0\1\234\30\0\20\234\1\u018a\1\234\1\0\1\234"+
    "\4\0\12\234\4\0\5\234\2\0\6\234\1\0\1\234"+
    "\30\0\6\234\1\u018b\13\234\1\0\1\234\4\0\12\234"+
    "\4\0\5\234\2\0\6\234\1\0\1\234\30\0\11\234"+
    "\1\u018c\10\234\1\0\1\234\4\0\12\234\4\0\5\234"+
    "\2\0\3\234\1\u018d\2\234\1\0\1\234\30\0\22\234"+
    "\1\0\1\234\4\0\12\234\4\0\5\234\2\0\6\234"+
    "\1\0\1\234\30\0\1\u018e\21\234\1\0\1\234\4\0"+
    "\12\234\4\0\5\234\2\0\6\234\1\0\1\234\30\0"+
    "\4\234\1\u018f\15\234\1\0\1\234\4\0\12\234\4\0"+
    "\5\234\2\0\2\234\1\u0190\3\234\1\0\1\234\30\0"+
    "\22\234\1\0\1\234\4\0\12\234\4\0\5\234\2\0"+
    "\6\234\1\0\1\234\30\0\6\234\1\u0191\13\234\1\0"+
    "\1\234\4\0\12\234\4\0\3\234\1\u0192\1\u0193\2\0"+
    "\6\234\1\0\1\234\30\0\22\234\1\0\1\234\4\0"+
    "\12\234\4\0\5\234\2\0\5\234\1\u0194\1\0\1\234"+
    "\30\0\22\234\1\0\1\234\4\0\12\234\4\0\5\234"+
    "\2\0\6\234\1\0\1\234\30\0\5\234\1\u0195\14\234"+
    "\1\0\1\234\4\0\12\234\4\0\4\234\1\u0196\2\0"+
    "\6\234\1\0\1\234\30\0\22\234\1\0\1\234\4\0"+
    "\12\234\4\0\4\234\1\u0197\2\0\6\234\1\0\1\234"+
    "\30\0\22\234\1\0\1\234\4\0\12\234\4\0\5\234"+
    "\2\0\6\234\1\0\1\234\30\0\1\234\1\u0198\20\234"+
    "\1\0\1\234\4\0\12\234\4\0\5\234\2\0\6\234"+
    "\1\0\1\234\30\0\10\234\1\u0199\11\234\1\0\1\234"+
    "\4\0\12\234\4\0\5\234\2\0\6\234\1\0\1\234"+
    "\30\0\16\234\1\u019a\3\234\1\0\1\234\4\0\12\234"+
    "\4\0\5\234\2\0\6\234\1\0\1\234\30\0\20\234"+
    "\1\u019b\1\234\1\0\1\234\4\0\12\234\4\0\5\234"+
    "\2\0\6\234\1\0\1\234\30\0\22\234\1\0\1\234"+
    "\4\0\6\234\1\u019c\3\234\4\0\5\234\2\0\6\234"+
    "\1\0\1\234\30\0\1\234\1\u019d\20\234\1\0\1\234"+
    "\4\0\12\234\4\0\4\234\1\u019e\2\0\6\234\1\0"+
    "\1\234\30\0\22\234\1\0\1\234\4\0\12\234\4\0"+
    "\5\234\2\0\6\234\1\0\1\234\30\0\1\234\1\u019f"+
    "\20\234\1\0\1\234\4\0\12\234\3\0\5\4\1\u01a0"+
    "\2\0\6\4\1\0\1\4\30\0\24\4\2\0\1\4"+
    "\1\0\12\4\3\0\6\4\2\0\3\4\1\u01a1\2\4"+
    "\1\0\1\4\30\0\24\4\2\0\1\4\1\0\12\4"+
    "\3\0\6\4\2\0\6\4\1\0\1\4\30\0\4\4"+
    "\1\u01a2\17\4\2\0\1\4\1\0\12\4\3\0\6\4"+
    "\2\0\1\4\1\u01a3\4\4\1\0\1\4\30\0\24\4"+
    "\2\0\1\4\1\0\12\4\3\0\5\4\1\u01a4\2\0"+
    "\6\4\1\0\1\4\30\0\24\4\2\0\1\4\1\0"+
    "\12\4\3\0\6\4\2\0\5\4\1\u01a5\1\0\1\4"+
    "\30\0\24\4\2\0\1\4\1\0\12\4\4\0\4\234"+
    "\1\u01a6\2\0\6\234\1\0\1\234\30\0\22\234\1\0"+
    "\1\234\4\0\12\234\4\0\5\234\2\0\1\234\1\u01a7"+
    "\4\234\1\0\1\234\30\0\22\234\1\0\1\234\4\0"+
    "\12\234\4\0\5\234\2\0\6\234\1\0\1\234\30\0"+
    "\17\234\1\u01a8\2\234\1\0\1\234\4\0\12\234\4\0"+
    "\5\234\2\0\6\234\1\0\1\234\30\0\22\234\1\0"+
    "\1\234\4\0\1\u01a9\11\234\4\0\5\234\2\0\6\234"+
    "\1\0\1\234\30\0\20\234\1\u01aa\1\234\1\0\1\234"+
    "\4\0\12\234\4\0\5\234\2\0\6\234\1\0\1\234"+
    "\30\0\20\234\1\u01ab\1\234\1\0\1\234\4\0\12\234"+
    "\4\0\5\234\2\0\6\234\1\0\1\234\30\0\3\234"+
    "\1\u01ac\16\234\1\0\1\234\4\0\12\234\4\0\5\234"+
    "\2\0\6\234\1\0\1\234\30\0\1\u01ad\21\234\1\0"+
    "\1\234\4\0\12\234\4\0\4\234\1\u01ae\2\0\6\234"+
    "\1\0\1\234\30\0\22\234\1\0\1\234\4\0\12\234"+
    "\4\0\5\234\2\0\6\234\1\0\1\234\30\0\7\234"+
    "\1\u01af\12\234\1\0\1\234\4\0\12\234\4\0\5\234"+
    "\2\0\3\234\1\u01b0\2\234\1\0\1\234\30\0\22\234"+
    "\1\0\1\234\4\0\12\234\4\0\5\234\2\0\6\234"+
    "\1\0\1\234\30\0\5\234\1\u01b1\14\234\1\0\1\234"+
    "\4\0\12\234\4\0\5\234\2\0\6\234\1\0\1\234"+
    "\30\0\7\234\1\u01b2\12\234\1\0\1\234\4\0\12\234"+
    "\4\0\4\234\1\u01b3\2\0\6\234\1\0\1\234\30\0"+
    "\22\234\1\0\1\234\4\0\12\234\4\0\5\234\2\0"+
    "\6\234\1\0\1\234\30\0\11\234\1\u01b4\10\234\1\0"+
    "\1\234\4\0\12\234\4\0\5\234\2\0\6\234\1\0"+
    "\1\234\30\0\4\234\1\u01b5\15\234\1\0\1\234\4\0"+
    "\12\234\4\0\5\234\2\0\6\234\1\0\1\234\30\0"+
    "\7\234\1\u01b6\12\234\1\0\1\234\4\0\12\234\4\0"+
    "\5\234\2\0\6\234\1\0\1\234\30\0\7\234\1\u01b7"+
    "\12\234\1\0\1\234\4\0\12\234\4\0\5\234\2\0"+
    "\3\234\1\u01b8\2\234\1\0\1\234\30\0\22\234\1\0"+
    "\1\234\4\0\12\234\4\0\5\234\2\0\6\234\1\0"+
    "\1\234\30\0\1\u01b9\21\234\1\0\1\234\4\0\12\234"+
    "\4\0\5\234\2\0\6\234\1\0\1\234\30\0\11\234"+
    "\1\u01ba\10\234\1\0\1\234\4\0\12\234\4\0\5\234"+
    "\2\0\6\234\1\0\1\234\30\0\7\234\1\u01bb\12\234"+
    "\1\0\1\234\4\0\12\234\4\0\5\234\2\0\3\234"+
    "\1\u01bc\2\234\1\0\1\234\30\0\22\234\1\0\1\234"+
    "\4\0\12\234\4\0\5\234\2\0\6\234\1\0\1\234"+
    "\30\0\3\234\1\u01bd\16\234\1\0\1\234\4\0\12\234"+
    "\4\0\4\234\1\u01be\2\0\6\234\1\0\1\234\30\0"+
    "\22\234\1\0\1\234\4\0\12\234\4\0\5\234\2\0"+
    "\6\234\1\0\1\234\30\0\1\u01bf\21\234\1\0\1\234"+
    "\4\0\12\234\4\0\4\234\1\u01c0\2\0\6\234\1\0"+
    "\1\234\30\0\22\234\1\0\1\234\4\0\12\234\4\0"+
    "\4\234\1\u01c1\2\0\6\234\1\0\1\234\30\0\22\234"+
    "\1\0\1\234\4\0\12\234\4\0\5\234\2\0\6\234"+
    "\1\0\1\234\30\0\4\234\1\u01c2\15\234\1\0\1\234"+
    "\4\0\12\234\4\0\5\234\2\0\5\234\1\u01c3\1\0"+
    "\1\234\30\0\22\234\1\0\1\234\4\0\12\234\4\0"+
    "\5\234\2\0\6\234\1\0\1\234\30\0\7\234\1\u01c4"+
    "\12\234\1\0\1\234\4\0\12\234\4\0\5\234\2\0"+
    "\6\234\1\0\1\234\30\0\6\234\1\u01c5\13\234\1\0"+
    "\1\234\4\0\12\234\4\0\5\234\2\0\6\234\1\0"+
    "\1\234\30\0\1\234\1\u01c6\20\234\1\0\1\234\4\0"+
    "\12\234\4\0\5\234\2\0\6\234\1\0\1\234\30\0"+
    "\1\234\1\u01c7\20\234\1\0\1\234\4\0\12\234\4\0"+
    "\5\234\2\0\6\234\1\0\1\234\30\0\16\234\1\u01c8"+
    "\3\234\1\0\1\234\4\0\12\234\4\0\5\234\2\0"+
    "\6\234\1\0\1\234\30\0\22\234\1\0\1\234\4\0"+
    "\6\234\1\u01c9\3\234\4\0\4\234\1\u01ca\2\0\6\234"+
    "\1\0\1\234\30\0\22\234\1\0\1\234\4\0\12\234"+
    "\4\0\4\234\1\u01cb\2\0\6\234\1\0\1\234\30\0"+
    "\22\234\1\0\1\234\4\0\12\234\4\0\5\234\2\0"+
    "\6\234\1\0\1\234\30\0\22\234\1\0\1\234\4\0"+
    "\1\u01cc\11\234\4\0\5\234\2\0\2\234\1\u01cd\3\234"+
    "\1\0\1\234\30\0\22\234\1\0\1\234\4\0\12\234"+
    "\4\0\5\234\2\0\6\234\1\0\1\234\30\0\10\234"+
    "\1\u01ce\11\234\1\0\1\234\4\0\12\234\4\0\5\234"+
    "\2\0\6\234\1\0\1\234\30\0\6\234\1\u01cf\13\234"+
    "\1\0\1\234\4\0\12\234\4\0\5\234\2\0\5\234"+
    "\1\u01d0\1\0\1\234\30\0\22\234\1\0\1\234\4\0"+
    "\12\234\4\0\4\234\1\u01d1\2\0\6\234\1\0\1\234"+
    "\30\0\22\234\1\0\1\234\4\0\12\234\4\0\5\234"+
    "\2\0\6\234\1\0\1\234\30\0\7\234\1\u01d2\12\234"+
    "\1\0\1\234\4\0\12\234\4\0\5\234\2\0\6\234"+
    "\1\0\1\234\30\0\1\u01d3\21\234\1\0\1\234\4\0"+
    "\12\234\4\0\5\234\2\0\6\234\1\0\1\234\30\0"+
    "\11\234\1\u01d4\10\234\1\0\1\234\4\0\12\234\3\0"+
    "\6\4\2\0\6\4\1\0\1\4\30\0\2\4\1\u01d5"+
    "\21\4\2\0\1\4\1\0\12\4\3\0\5\4\1\u01d6"+
    "\2\0\6\4\1\0\1\4\30\0\24\4\2\0\1\4"+
    "\1\0\12\4\3\0\6\4\2\0\6\4\1\0\1\4"+
    "\30\0\7\4\1\u01d7\14\4\2\0\1\4\1\0\12\4"+
    "\3\0\5\4\1\u01d8\2\0\6\4\1\0\1\4\30\0"+
    "\24\4\2\0\1\4\1\0\12\4\4\0\5\234\2\0"+
    "\6\234\1\0\1\234\30\0\7\234\1\u01d9\12\234\1\0"+
    "\1\234\4\0\12\234\4\0\5\234\2\0\1\u01da\1\234"+
    "\1\u01db\3\234\1\0\1\234\30\0\22\234\1\0\1\234"+
    "\4\0\12\234\4\0\5\234\2\0\1\234\1\u01dc\4\234"+
    "\1\0\1\234\30\0\22\234\1\0\1\234\4\0\12\234"+
    "\4\0\5\234\2\0\3\234\1\u01dd\2\234\1\0\1\234"+
    "\30\0\22\234\1\0\1\234\4\0\12\234\4\0\5\234"+
    "\2\0\6\234\1\0\1\234\30\0\4\234\1\u01de\15\234"+
    "\1\0\1\234\4\0\12\234\4\0\5\234\2\0\6\234"+
    "\1\0\1\234\30\0\10\234\1\u01df\11\234\1\0\1\234"+
    "\4\0\12\234\4\0\5\234\2\0\6\234\1\0\1\234"+
    "\30\0\15\234\1\u01e0\4\234\1\0\1\234\4\0\12\234"+
    "\4\0\5\234\2\0\6\234\1\0\1\234\30\0\7\234"+
    "\1\u01e1\12\234\1\0\1\234\4\0\12\234\4\0\5\234"+
    "\2\0\6\234\1\0\1\234\30\0\3\234\1\u01e2\16\234"+
    "\1\0\1\234\4\0\12\234\4\0\5\234\2\0\6\234"+
    "\1\0\1\234\30\0\3\234\1\u01e3\16\234\1\0\1\234"+
    "\4\0\12\234\4\0\5\234\2\0\6\234\1\0\1\234"+
    "\30\0\5\234\1\u01e4\14\234\1\0\1\234\4\0\12\234"+
    "\4\0\5\234\2\0\6\234\1\0\1\234\30\0\15\234"+
    "\1\u01e5\4\234\1\0\1\234\4\0\12\234\4\0\5\234"+
    "\2\0\6\234\1\0\1\234\30\0\7\234\1\u01e6\12\234"+
    "\1\0\1\234\4\0\12\234\4\0\4\234\1\u01e7\2\0"+
    "\6\234\1\0\1\234\30\0\22\234\1\0\1\234\4\0"+
    "\12\234\4\0\4\234\1\u01e8\2\0\6\234\1\0\1\234"+
    "\30\0\22\234\1\0\1\234\4\0\12\234\4\0\5\234"+
    "\2\0\6\234\1\0\1\234\30\0\1\234\1\u01e9\20\234"+
    "\1\0\1\234\4\0\12\234\4\0\5\234\2\0\6\234"+
    "\1\0\1\234\30\0\4\234\1\u01ea\15\234\1\0\1\234"+
    "\4\0\12\234\4\0\5\234\2\0\6\234\1\0\1\234"+
    "\30\0\5\234\1\u01eb\14\234\1\0\1\234\4\0\12\234"+
    "\4\0\5\234\2\0\6\234\1\0\1\234\30\0\7\234"+
    "\1\u01ec\12\234\1\0\1\234\4\0\12\234\4\0\5\234"+
    "\2\0\6\234\1\0\1\234\30\0\2\234\1\u01ed\17\234"+
    "\1\0\1\234\4\0\12\234\4\0\5\234\2\0\6\234"+
    "\1\0\1\234\30\0\3\234\1\u01ee\16\234\1\0\1\234"+
    "\4\0\12\234\4\0\5\234\2\0\6\234\1\0\1\234"+
    "\30\0\4\234\1\u01ef\15\234\1\0\1\234\4\0\12\234"+
    "\4\0\5\234\2\0\6\234\1\0\1\234\30\0\10\234"+
    "\1\u01f0\11\234\1\0\1\234\4\0\12\234\4\0\5\234"+
    "\2\0\6\234\1\0\1\234\30\0\7\234\1\u01f1\12\234"+
    "\1\0\1\234\4\0\12\234\4\0\5\234\2\0\5\234"+
    "\1\u01f2\1\0\1\234\30\0\22\234\1\0\1\234\4\0"+
    "\12\234\4\0\5\234\2\0\6\234\1\0\1\234\30\0"+
    "\11\234\1\u01f3\10\234\1\0\1\234\4\0\12\234\4\0"+
    "\5\234\2\0\6\234\1\0\1\234\30\0\7\234\1\u01f4"+
    "\12\234\1\0\1\234\4\0\12\234\4\0\5\234\2\0"+
    "\6\234\1\0\1\234\30\0\1\234\1\u01f5\20\234\1\0"+
    "\1\234\4\0\12\234\4\0\5\234\2\0\6\234\1\0"+
    "\1\234\30\0\2\234\1\u01f6\17\234\1\0\1\234\4\0"+
    "\12\234\4\0\5\234\2\0\6\234\1\0\1\234\30\0"+
    "\4\234\1\u01f7\15\234\1\0\1\234\4\0\12\234\4\0"+
    "\4\234\1\u01f8\2\0\6\234\1\0\1\234\30\0\22\234"+
    "\1\0\1\234\4\0\12\234\4\0\5\234\2\0\6\234"+
    "\1\0\1\234\30\0\11\234\1\u01f9\10\234\1\0\1\234"+
    "\4\0\12\234\4\0\5\234\2\0\6\234\1\0\1\234"+
    "\30\0\11\234\1\u01fa\10\234\1\0\1\234\4\0\12\234"+
    "\4\0\5\234\2\0\6\234\1\0\1\234\30\0\20\234"+
    "\1\u01fb\1\234\1\0\1\234\4\0\12\234\4\0\5\234"+
    "\2\0\6\234\1\0\1\234\30\0\7\234\1\u01fc\12\234"+
    "\1\0\1\234\4\0\12\234\4\0\5\234\2\0\6\234"+
    "\1\0\1\234\30\0\11\234\1\u01fd\10\234\1\0\1\234"+
    "\4\0\12\234\4\0\5\234\2\0\6\234\1\0\1\234"+
    "\30\0\4\234\1\u01fe\15\234\1\0\1\234\4\0\12\234"+
    "\4\0\5\234\2\0\6\234\1\0\1\234\30\0\2\234"+
    "\1\u01ff\17\234\1\0\1\234\4\0\12\234\4\0\5\234"+
    "\2\0\6\234\1\0\1\234\30\0\1\234\1\u0200\20\234"+
    "\1\0\1\234\4\0\12\234\4\0\4\234\1\u0201\2\0"+
    "\6\234\1\0\1\234\30\0\22\234\1\0\1\234\4\0"+
    "\12\234\4\0\5\234\2\0\6\234\1\0\1\234\30\0"+
    "\4\234\1\u0202\15\234\1\0\1\234\4\0\12\234\4\0"+
    "\5\234\2\0\6\234\1\0\1\234\30\0\7\234\1\u0203"+
    "\12\234\1\0\1\234\4\0\12\234\4\0\5\234\2\0"+
    "\6\234\1\0\1\234\30\0\22\234\1\0\1\234\4\0"+
    "\4\234\1\u0204\5\234\4\0\5\234\2\0\6\234\1\0"+
    "\1\234\30\0\11\234\1\u0205\10\234\1\0\1\234\4\0"+
    "\12\234\4\0\5\234\2\0\6\234\1\0\1\234\30\0"+
    "\11\234\1\u0206\10\234\1\0\1\234\4\0\12\234\4\0"+
    "\5\234\2\0\6\234\1\0\1\234\30\0\1\234\1\u0207"+
    "\20\234\1\0\1\234\4\0\12\234\4\0\5\234\2\0"+
    "\6\234\1\0\1\234\30\0\1\234\1\u0208\20\234\1\0"+
    "\1\234\4\0\12\234\4\0\4\234\1\u0209\2\0\6\234"+
    "\1\0\1\234\30\0\22\234\1\0\1\234\4\0\12\234"+
    "\4\0\5\234\2\0\1\u020a\5\234\1\0\1\234\30\0"+
    "\22\234\1\0\1\234\4\0\12\234\4\0\5\234\2\0"+
    "\6\234\1\0\1\234\30\0\6\234\1\u020b\13\234\1\0"+
    "\1\234\4\0\12\234\4\0\4\234\1\u020c\2\0\6\234"+
    "\1\0\1\234\30\0\22\234\1\0\1\234\4\0\12\234"+
    "\4\0\5\234\2\0\3\234\1\u020d\2\234\1\0\1\234"+
    "\30\0\22\234\1\0\1\234\4\0\12\234\4\0\5\234"+
    "\2\0\6\234\1\0\1\234\30\0\11\234\1\u020e\10\234"+
    "\1\0\1\234\4\0\12\234\4\0\5\234\2\0\6\234"+
    "\1\0\1\234\30\0\1\234\1\u020f\20\234\1\0\1\234"+
    "\4\0\12\234\4\0\5\234\2\0\6\234\1\0\1\234"+
    "\30\0\20\234\1\u0210\1\234\1\0\1\234\4\0\12\234"+
    "\4\0\5\234\2\0\6\234\1\0\1\234\30\0\1\u0211"+
    "\21\234\1\0\1\234\4\0\12\234\4\0\5\234\2\0"+
    "\6\234\1\0\1\234\30\0\4\234\1\u0212\15\234\1\0"+
    "\1\234\4\0\12\234\4\0\5\234\2\0\6\234\1\0"+
    "\1\234\30\0\5\234\1\u0213\14\234\1\0\1\234\4\0"+
    "\12\234\4\0\4\234\1\u0214\2\0\6\234\1\0\1\234"+
    "\30\0\22\234\1\0\1\234\4\0\12\234\4\0\5\234"+
    "\2\0\6\234\1\0\1\234\30\0\4\234\1\u0215\15\234"+
    "\1\0\1\234\4\0\12\234\4\0\5\234\2\0\6\234"+
    "\1\0\1\234\30\0\2\234\1\u0216\17\234\1\0\1\234"+
    "\4\0\12\234\4\0\5\234\2\0\1\234\1\u0217\4\234"+
    "\1\0\1\234\30\0\22\234\1\0\1\234\4\0\12\234"+
    "\4\0\4\234\1\u0218\2\0\6\234\1\0\1\234\30\0"+
    "\22\234\1\0\1\234\4\0\12\234\4\0\5\234\2\0"+
    "\6\234\1\0\1\234\1\u0219\27\0\22\234\1\0\1\234"+
    "\4\0\12\234\4\0\5\234\2\0\6\234\1\0\1\234"+
    "\30\0\7\234\1\u021a\12\234\1\0\1\234\4\0\12\234"+
    "\4\0\4\234\1\u021b\2\0\6\234\1\0\1\234\30\0"+
    "\22\234\1\0\1\234\4\0\12\234\4\0\5\234\2\0"+
    "\6\234\1\0\1\234\30\0\12\234\1\u021c\7\234\1\0"+
    "\1\234\4\0\12\234\4\0\5\234\2\0\6\234\1\0"+
    "\1\234\30\0\4\234\1\u021d\15\234\1\0\1\234\4\0"+
    "\12\234\4\0\5\234\2\0\6\234\1\0\1\234\30\0"+
    "\22\234\1\0\1\234\4\0\4\234\1\u021e\5\234\4\0"+
    "\5\234\2\0\6\234\1\0\1\234\30\0\10\234\1\u021f"+
    "\11\234\1\0\1\234\4\0\12\234\4\0\5\234\2\0"+
    "\6\234\1\0\1\234\30\0\22\234\1\0\1\234\4\0"+
    "\6\234\1\u0220\3\234\4\0\4\234\1\u0221\2\0\6\234"+
    "\1\0\1\234\30\0\22\234\1\0\1\234\4\0\12\234"+
    "\4\0\5\234\2\0\6\234\1\0\1\234\30\0\11\234"+
    "\1\u0222\10\234\1\0\1\234\4\0\12\234\4\0\5\234"+
    "\2\0\6\234\1\0\1\234\30\0\3\234\1\u0223\16\234"+
    "\1\0\1\234\4\0\12\234\4\0\5\234\2\0\6\234"+
    "\1\0\1\234\30\0\22\234\1\0\1\234\4\0\2\234"+
    "\1\u0224\7\234\4\0\5\234\2\0\6\234\1\0\1\234"+
    "\30\0\1\u0225\21\234\1\0\1\234\4\0\12\234\4\0"+
    "\5\234\2\0\6\234\1\0\1\234\30\0\3\234\1\u0226"+
    "\16\234\1\0\1\234\4\0\12\234\4\0\5\234\2\0"+
    "\6\234\1\0\1\234\30\0\1\234\1\u0227\20\234\1\0"+
    "\1\234\4\0\12\234\4\0\5\234\2\0\3\234\1\u0228"+
    "\2\234\1\0\1\234\30\0\22\234\1\0\1\234\4\0"+
    "\12\234\4\0\5\234\2\0\6\234\1\0\1\234\30\0"+
    "\11\234\1\u0229\10\234\1\0\1\234\4\0\12\234\4\0"+
    "\5\234\2\0\6\234\1\0\1\234\30\0\1\u022a\21\234"+
    "\1\0\1\234\4\0\12\234\4\0\5\234\2\0\6\234"+
    "\1\0\1\234\30\0\2\234\1\u022b\17\234\1\0\1\234"+
    "\4\0\12\234\4\0\5\234\2\0\6\234\1\0\1\234"+
    "\30\0\10\234\1\u022c\11\234\1\0\1\234\4\0\12\234"+
    "\4\0\5\234\2\0\6\234\1\0\1\234\30\0\5\234"+
    "\1\u022d\14\234\1\0\1\234\4\0\12\234\4\0\5\234"+
    "\2\0\6\234\1\0\1\234\30\0\4\234\1\u022e\15\234"+
    "\1\0\1\234\4\0\12\234\4\0\5\234\2\0\6\234"+
    "\1\0\1\234\30\0\1\u022f\21\234\1\0\1\234\4\0"+
    "\12\234\4\0\5\234\2\0\6\234\1\0\1\234\30\0"+
    "\22\234\1\0\1\234\4\0\1\u0230\11\234\4\0\5\234"+
    "\2\0\6\234\1\0\1\234\30\0\1\234\1\u0231\20\234"+
    "\1\0\1\234\4\0\12\234\4\0\5\u0232\2\0\6\u0232"+
    "\1\0\1\u0232\30\0\22\u0232\1\0\1\u0232\4\0\12\u0232"+
    "\4\0\5\234\2\0\6\234\1\0\1\234\30\0\17\234"+
    "\1\u0233\2\234\1\0\1\234\4\0\12\234\4\0\5\234"+
    "\2\0\6\234\1\0\1\234\30\0\1\u0234\21\234\1\0"+
    "\1\234\4\0\12\234\4\0\4\234\1\u0235\2\0\6\234"+
    "\1\0\1\234\30\0\22\234\1\0\1\234\4\0\12\234"+
    "\4\0\5\234\2\0\1\234\1\u0236\4\234\1\0\1\234"+
    "\30\0\22\234\1\0\1\234\4\0\12\234\4\0\5\234"+
    "\2\0\6\234\1\0\1\234\30\0\11\234\1\u0237\10\234"+
    "\1\0\1\234\4\0\12\234\4\0\4\234\1\u0238\2\0"+
    "\6\234\1\0\1\234\30\0\22\234\1\0\1\234\4\0"+
    "\12\234\4\0\5\234\2\0\6\234\1\0\1\234\30\0"+
    "\4\234\1\u0239\15\234\1\0\1\234\4\0\12\234\4\0"+
    "\5\234\2\0\5\234\1\u023a\1\0\1\234\30\0\22\234"+
    "\1\0\1\234\4\0\12\234\4\0\5\234\2\0\6\234"+
    "\1\0\1\234\30\0\7\234\1\u023b\12\234\1\0\1\234"+
    "\4\0\12\234\4\0\5\234\2\0\3\234\1\u023c\2\234"+
    "\1\0\1\234\30\0\22\234\1\0\1\234\4\0\12\234"+
    "\4\0\5\234\2\0\6\234\1\0\1\234\30\0\11\234"+
    "\1\u023d\10\234\1\0\1\234\4\0\12\234\4\0\4\234"+
    "\1\u023e\2\0\6\234\1\0\1\234\30\0\22\234\1\0"+
    "\1\234\4\0\12\234\4\0\4\234\1\u023f\2\0\6\234"+
    "\1\0\1\234\30\0\22\234\1\0\1\234\4\0\12\234"+
    "\4\0\5\234\2\0\6\234\1\0\1\234\30\0\7\234"+
    "\1\u0240\12\234\1\0\1\234\4\0\12\234\4\0\5\234"+
    "\2\0\6\234\1\0\1\234\30\0\22\234\1\0\1\234"+
    "\4\0\10\234\1\u0241\1\234\4\0\4\234\1\u0242\2\0"+
    "\6\234\1\0\1\234\30\0\22\234\1\0\1\234\4\0"+
    "\12\234\4\0\4\234\1\u0243\2\0\6\234\1\0\1\234"+
    "\30\0\22\234\1\0\1\234\4\0\12\234\4\0\5\234"+
    "\2\0\6\234\1\0\1\234\30\0\1\234\1\u0244\20\234"+
    "\1\0\1\234\4\0\12\234\4\0\5\234\2\0\6\234"+
    "\1\0\1\234\30\0\7\234\1\u0245\12\234\1\0\1\234"+
    "\4\0\12\234\4\0\5\234\2\0\6\234\1\0\1\234"+
    "\30\0\11\234\1\u0246\10\234\1\0\1\234\4\0\12\234"+
    "\4\0\4\234\1\u0247\2\0\6\234\1\0\1\234\30\0"+
    "\22\234\1\0\1\234\4\0\12\234\4\0\5\u0232\2\0"+
    "\6\u0232\1\0\1\u0232\1\0\1\u0219\26\0\22\u0232\1\0"+
    "\1\u0232\4\0\12\u0232\4\0\5\234\2\0\6\234\1\0"+
    "\1\234\30\0\22\234\1\0\1\234\4\0\2\234\1\u0248"+
    "\7\234\4\0\5\234\2\0\6\234\1\0\1\234\30\0"+
    "\7\234\1\u0249\12\234\1\0\1\234\4\0\12\234\4\0"+
    "\5\234\2\0\6\234\1\0\1\234\30\0\4\234\1\u024a"+
    "\15\234\1\0\1\234\4\0\12\234\4\0\5\234\2\0"+
    "\6\234\1\0\1\234\30\0\1\234\1\u024b\20\234\1\0"+
    "\1\234\4\0\12\234\4\0\2\234\1\u024c\2\234\2\0"+
    "\6\234\1\0\1\234\30\0\22\234\1\0\1\234\4\0"+
    "\12\234\4\0\4\234\1\u024d\2\0\6\234\1\0\1\234"+
    "\30\0\22\234\1\0\1\234\4\0\12\234\4\0\5\234"+
    "\2\0\6\234\1\0\1\234\30\0\12\234\1\u024e\7\234"+
    "\1\0\1\234\4\0\12\234\4\0\5\234\2\0\6\234"+
    "\1\0\1\234\30\0\17\234\1\u024f\2\234\1\0\1\234"+
    "\4\0\12\234\4\0\5\234\2\0\6\234\1\0\1\234"+
    "\30\0\2\234\1\u0250\17\234\1\0\1\234\4\0\12\234"+
    "\4\0\5\234\2\0\6\234\1\0\1\234\30\0\1\u0251"+
    "\21\234\1\0\1\234\4\0\12\234\4\0\5\234\2\0"+
    "\6\234\1\0\1\234\30\0\7\234\1\u0252\12\234\1\0"+
    "\1\234\4\0\12\234\4\0\5\234\2\0\5\234\1\u0253"+
    "\1\0\1\234\30\0\22\234\1\0\1\234\4\0\12\234"+
    "\4\0\4\234\1\u0254\2\0\6\234\1\0\1\234\30\0"+
    "\22\234\1\0\1\234\4\0\12\234\4\0\5\234\2\0"+
    "\6\234\1\0\1\234\30\0\1\234\1\u0255\20\234\1\0"+
    "\1\234\4\0\12\234\4\0\5\234\2\0\6\234\1\0"+
    "\1\234\30\0\1\u0256\21\234\1\0\1\234\4\0\12\234"+
    "\4\0\5\234\2\0\6\234\1\0\1\234\30\0\5\234"+
    "\1\u0257\14\234\1\0\1\234\4\0\12\234\4\0\5\234"+
    "\2\0\6\234\1\0\1\234\30\0\22\234\1\0\1\234"+
    "\4\0\6\234\1\u0258\3\234\4\0\5\234\2\0\6\234"+
    "\1\0\1\234\30\0\11\234\1\u0259\10\234\1\0\1\234"+
    "\4\0\12\234\4\0\2\234\1\u025a\2\234\2\0\6\234"+
    "\1\0\1\234\30\0\22\234\1\0\1\234\4\0\12\234"+
    "\4\0\5\234\2\0\1\234\1\u025b\4\234\1\0\1\234"+
    "\30\0\22\234\1\0\1\234\4\0\12\234\4\0\5\234"+
    "\2\0\6\234\1\0\1\234\30\0\11\234\1\u025c\10\234"+
    "\1\0\1\234\4\0\12\234\4\0\4\234\1\u025d\2\0"+
    "\6\234\1\0\1\234\30\0\22\234\1\0\1\234\4\0"+
    "\12\234\4\0\5\234\2\0\1\234\1\u025e\4\234\1\0"+
    "\1\234\30\0\22\234\1\0\1\234\4\0\12\234\4\0"+
    "\5\234\2\0\6\234\1\0\1\234\30\0\5\234\1\u025f"+
    "\14\234\1\0\1\234\4\0\12\234\4\0\5\234\2\0"+
    "\6\234\1\0\1\234\30\0\1\234\1\u0260\20\234\1\0"+
    "\1\234\4\0\12\234\4\0\5\234\2\0\6\234\1\0"+
    "\1\234\30\0\22\234\1\0\1\234\4\0\6\234\1\u0261"+
    "\3\234\4\0\5\234\2\0\6\234\1\0\1\234\30\0"+
    "\4\234\1\u0262\15\234\1\0\1\234\4\0\12\234\4\0"+
    "\5\234\2\0\2\234\1\u0263\3\234\1\0\1\234\30\0"+
    "\22\234\1\0\1\234\4\0\12\234\4\0\4\234\1\u0264"+
    "\2\0\6\234\1\0\1\234\30\0\22\234\1\0\1\234"+
    "\4\0\12\234\4\0\4\234\1\u0265\2\0\6\234\1\0"+
    "\1\234\30\0\22\234\1\0\1\234\4\0\12\234\4\0"+
    "\5\234\2\0\1\234\1\u0266\4\234\1\0\1\234\30\0"+
    "\22\234\1\0\1\234\4\0\12\234\4\0\5\234\2\0"+
    "\6\234\1\0\1\234\30\0\22\234\1\0\1\234\4\0"+
    "\6\234\1\u0267\3\234\4\0\5\234\2\0\6\234\1\0"+
    "\1\234\30\0\1\234\1\u0268\20\234\1\0\1\234\4\0"+
    "\12\234\4\0\5\234\2\0\6\234\1\0\1\234\30\0"+
    "\4\234\1\u0269\15\234\1\0\1\234\4\0\12\234\4\0"+
    "\5\234\2\0\6\234\1\0\1\234\30\0\7\234\1\u026a"+
    "\12\234\1\0\1\234\4\0\12\234\4\0\5\234\2\0"+
    "\1\234\1\u026b\4\234\1\0\1\234\30\0\22\234\1\0"+
    "\1\234\4\0\12\234\4\0\5\234\2\0\6\234\1\0"+
    "\1\234\30\0\11\234\1\u026c\10\234\1\0\1\234\4\0"+
    "\12\234\4\0\5\234\2\0\6\234\1\0\1\234\30\0"+
    "\22\234\1\0\1\234\4\0\6\234\1\u026d\3\234\4\0"+
    "\4\234\1\u026e\2\0\6\234\1\0\1\234\30\0\22\234"+
    "\1\0\1\234\4\0\12\234\4\0\5\234\2\0\1\234"+
    "\1\u026f\4\234\1\0\1\234\30\0\22\234\1\0\1\234"+
    "\4\0\12\234\2\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[37653];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\11\1\1\11\1\1\1\11\13\1\3\11"+
    "\1\1\10\11\15\1\1\11\1\0\7\1\4\11\6\1"+
    "\1\0\1\1\3\11\1\1\13\11\1\0\21\1\2\0"+
    "\1\1\1\0\2\1\1\0\1\1\1\11\1\1\1\0"+
    "\1\11\13\1\1\0\5\11\25\1\1\0\35\1\1\11"+
    "\1\1\1\0\13\1\1\0\23\1\1\11\111\1\1\11"+
    "\363\1\1\0\126\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[623];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
	private Token token(String categoryName) {
		return new Token(yyline, yycolumn, yytext(), CategoriesHierarchy.getCategory(categoryName));
	}
	
	private Token tokenWithSnippet(String categoryName) {
		return new Token(yyline, yycolumn, yytext().split(" ", 2)[0], CategoriesHierarchy.getCategory(categoryName), yytext().split(" ", 2)[1]);
	}
	
	public Token next_token_safe() throws IOException {
		final Symbol $ = next_token();
		return $.sym == YYEOF ? null : (Token) $;
	}
	
	public class sym{
		public static final int EOF = -1;
	}
	
	private static boolean initialized = false;
	public final static String lolaEscapingCharacter = "##";
	public static void initialize() throws CycleFoundException {
		if(initialized)
			return;
		initialized = true;
		CategoriesHierarchy.addTriviaCategory("ignore");
		CategoriesHierarchy.addCategory("tridot");
		CategoriesHierarchy.addCategory("eqrsh");
		CategoriesHierarchy.addCategory("eqlsh");
		CategoriesHierarchy.addCategory("eqadd");
		CategoriesHierarchy.addCategory("eqmul");
		CategoriesHierarchy.addCategory("eqdiv");
		CategoriesHierarchy.addCategory("eqmod");
		CategoriesHierarchy.addCategory("eqand");
		CategoriesHierarchy.addCategory("eqor");
		CategoriesHierarchy.addCategory("eqxor");
		CategoriesHierarchy.addCategory("birsh");
		CategoriesHierarchy.addCategory("bilsh");
		CategoriesHierarchy.addCategory("plus");
		CategoriesHierarchy.addCategory("minus");
		CategoriesHierarchy.addCategory("uninc");
		CategoriesHierarchy.addCategory("undec");
		CategoriesHierarchy.addCategory("biandlogic");
		CategoriesHierarchy.addCategory("biorlogic");
		CategoriesHierarchy.addCategory("bilesseq");
		CategoriesHierarchy.addCategory("bigreatereq");
		CategoriesHierarchy.addCategory("bieq");
		CategoriesHierarchy.addCategory("bineq");
		CategoriesHierarchy.addCategory("or");
		CategoriesHierarchy.addCategory("bixor");
		CategoriesHierarchy.addCategory("bimod");
		CategoriesHierarchy.addCategory("bigreater");
		CategoriesHierarchy.addCategory("biless");
		CategoriesHierarchy.addCategory("bidiv");
		CategoriesHierarchy.addCategory("star");
		CategoriesHierarchy.addCategory("amp");
		CategoriesHierarchy.addCategory("unnot");
		CategoriesHierarchy.addCategory("unneg");
		CategoriesHierarchy.addCategory("semicolon");
		CategoriesHierarchy.addCategory("comma");
		CategoriesHierarchy.addCategory("apostrophe");
		CategoriesHierarchy.addCategory("colon");
		CategoriesHierarchy.addCategory("dot");
		CategoriesHierarchy.addCategory("arrow");
		CategoriesHierarchy.addCategory("eq");
		CategoriesHierarchy.addCategory("ques");
		CategoriesHierarchy.addCategory("diopencurly");
		CategoriesHierarchy.addCategory("opencurly");
		CategoriesHierarchy.addCategory("diclosecurly");
		CategoriesHierarchy.addCategory("closecurly");
		CategoriesHierarchy.addCategory("openparen");
		CategoriesHierarchy.addCategory("closeparen");
		CategoriesHierarchy.addCategory("openbracket");
		CategoriesHierarchy.addCategory("closebracket");
		CategoriesHierarchy.addCategory("void");
		CategoriesHierarchy.addCategory("float");
		CategoriesHierarchy.addCategory("short");
		CategoriesHierarchy.addCategory("char");
		CategoriesHierarchy.addCategory("double");
		CategoriesHierarchy.addCategory("int");
		CategoriesHierarchy.addCategory("long");
		CategoriesHierarchy.addCategory("auto");
		CategoriesHierarchy.addCategory("const");
		CategoriesHierarchy.addCategory("extern");
		CategoriesHierarchy.addCategory("register");
		CategoriesHierarchy.addCategory("signed");
		CategoriesHierarchy.addCategory("static");
		CategoriesHierarchy.addCategory("unsigned");
		CategoriesHierarchy.addCategory("volatile");
		CategoriesHierarchy.addCategory("break");
		CategoriesHierarchy.addCategory("case");
		CategoriesHierarchy.addCategory("continue");
		CategoriesHierarchy.addCategory("default");
		CategoriesHierarchy.addCategory("do");
		CategoriesHierarchy.addCategory("else");
		CategoriesHierarchy.addCategory("for");
		CategoriesHierarchy.addCategory("goto");
		CategoriesHierarchy.addCategory("if");
		CategoriesHierarchy.addCategory("return");
		CategoriesHierarchy.addCategory("switch");
		CategoriesHierarchy.addCategory("while");
		CategoriesHierarchy.addCategory("enum");
		CategoriesHierarchy.addCategory("struct");
		CategoriesHierarchy.addCategory("typedef");
		CategoriesHierarchy.addCategory("union");
		CategoriesHierarchy.addCategory("sizeof");
		CategoriesHierarchy.addCategory("lhexadecimal");
		CategoriesHierarchy.addCategory("loctal");
		CategoriesHierarchy.addCategory("ldecimal");
		CategoriesHierarchy.addCategory("lfloat_form_a");
		CategoriesHierarchy.addCategory("lfloat_form_b");
		CategoriesHierarchy.addCategory("lfloat_form_c");
		CategoriesHierarchy.addCategory("lstring");
		CategoriesHierarchy.addCategory("identifier");
		CategoriesHierarchy.addCategory("character");
		CategoriesHierarchy.addCategory("sharp");
		CategoriesHierarchy.addKeywordCategory("##and");
		CategoriesHierarchy.addKeywordCategory("##anchor");
		CategoriesHierarchy.addKeywordCategory("##NewLine");
		CategoriesHierarchy.addKeywordCategory("##replace");
		CategoriesHierarchy.addKeywordCategory("##see");
		CategoriesHierarchy.addKeywordCategory("##SomeIdentifier");
		CategoriesHierarchy.addKeywordCategory("##run");
		CategoriesHierarchy.addKeywordCategory("##Neither");
		CategoriesHierarchy.addKeywordCategory("##Include");
		CategoriesHierarchy.addKeywordCategory("##find");
		CategoriesHierarchy.addKeywordCategory("##Empty");
		CategoriesHierarchy.addKeywordCategory("##Unbalanced");
		CategoriesHierarchy.addKeywordCategory("##closer");
		CategoriesHierarchy.addKeywordCategory("##exceptFor");
		CategoriesHierarchy.addKeywordCategory("##delete");
		CategoriesHierarchy.addKeywordCategory("##Unless");
		CategoriesHierarchy.addKeywordCategory("##andAlso");
		CategoriesHierarchy.addKeywordCategory("##Import");
		CategoriesHierarchy.addKeywordCategory("##log");
		CategoriesHierarchy.addKeywordCategory("##Find");
		CategoriesHierarchy.addKeywordCategory("##prepend");
		CategoriesHierarchy.addKeywordCategory("##note");
		CategoriesHierarchy.addKeywordCategory("##opener");
		CategoriesHierarchy.addKeywordCategory("##Match");
		CategoriesHierarchy.addKeywordCategory("##Splice");
		CategoriesHierarchy.addKeywordCategory("##example");
		CategoriesHierarchy.addKeywordCategory("##Nothing");
		CategoriesHierarchy.addKeywordCategory("##SameLine");
		CategoriesHierarchy.addKeywordCategory("##PermutationOf");
		CategoriesHierarchy.addKeywordCategory("##Optional");
		CategoriesHierarchy.addKeywordCategory("##Case");
		CategoriesHierarchy.addKeywordCategory("##followedBy");
		CategoriesHierarchy.addKeywordCategory("##xor");
		CategoriesHierarchy.addKeywordCategory("##ProperSubsetOf");
		CategoriesHierarchy.addKeywordCategory("##description");
		CategoriesHierarchy.addKeywordCategory("##resultsIn");
		CategoriesHierarchy.addKeywordCategory("##append");
		CategoriesHierarchy.addKeywordCategory("##else");
		CategoriesHierarchy.addKeywordCategory("##assert");
		CategoriesHierarchy.addKeywordCategory("##Not");
		CategoriesHierarchy.addKeywordCategory("##Xither");
		CategoriesHierarchy.addKeywordCategory("##EndOfFile");
		CategoriesHierarchy.addKeywordCategory("##NoneOrMore");
		CategoriesHierarchy.addKeywordCategory("##Either");
		CategoriesHierarchy.addKeywordCategory("##If");
		CategoriesHierarchy.addKeywordCategory("##elseIf");
		CategoriesHierarchy.addKeywordCategory("##SubsetOf");
		CategoriesHierarchy.addKeywordCategory("##Literal");
		CategoriesHierarchy.addKeywordCategory("##Identifier");
		CategoriesHierarchy.addKeywordCategory("##with");
		CategoriesHierarchy.addKeywordCategory("##nor");
		CategoriesHierarchy.addKeywordCategory("##BeginningOfLine");
		CategoriesHierarchy.addKeywordCategory("##NonEmptySubsetOf");
		CategoriesHierarchy.addKeywordCategory("##ifNone");
		CategoriesHierarchy.addKeywordCategory("##Sequence");
		CategoriesHierarchy.addKeywordCategory("##of");
		CategoriesHierarchy.addKeywordCategory("##OneOrMore");
		CategoriesHierarchy.addKeywordCategory("##or");
		CategoriesHierarchy.addKeywordCategory("##filter");
		CategoriesHierarchy.addKeywordCategory("##without");
		CategoriesHierarchy.addKeywordCategory("##separator");
		CategoriesHierarchy.addKeywordCategory("##ForEach");
		CategoriesHierarchy.addKeywordCategory("##otherwise");
		CategoriesHierarchy.addKeywordCategory("##Any");
		CategoriesHierarchy.addKeywordCategory("##EndOfLine");
		CategoriesHierarchy.addKeywordCategory("##");
		CategoriesHierarchy.addCategory("eqop");
		CategoriesHierarchy.addClassification("eqor", "eqop");
		CategoriesHierarchy.addClassification("eqdiv", "eqop");
		CategoriesHierarchy.addClassification("eqrsh", "eqop");
		CategoriesHierarchy.addClassification("eqxor", "eqop");
		CategoriesHierarchy.addClassification("eqlsh", "eqop");
		CategoriesHierarchy.addClassification("eqmul", "eqop");
		CategoriesHierarchy.addClassification("eqand", "eqop");
		CategoriesHierarchy.addClassification("eqadd", "eqop");
		CategoriesHierarchy.addClassification("eqmod", "eqop");
		CategoriesHierarchy.addCategory("biop");
		CategoriesHierarchy.addClassification("bigreater", "biop");
		CategoriesHierarchy.addClassification("or", "biop");
		CategoriesHierarchy.addClassification("star", "biop");
		CategoriesHierarchy.addClassification("biless", "biop");
		CategoriesHierarchy.addClassification("bilesseq", "biop");
		CategoriesHierarchy.addClassification("birsh", "biop");
		CategoriesHierarchy.addClassification("bixor", "biop");
		CategoriesHierarchy.addClassification("bimod", "biop");
		CategoriesHierarchy.addClassification("bieq", "biop");
		CategoriesHierarchy.addClassification("bilsh", "biop");
		CategoriesHierarchy.addClassification("bineq", "biop");
		CategoriesHierarchy.addClassification("bidiv", "biop");
		CategoriesHierarchy.addClassification("plus", "biop");
		CategoriesHierarchy.addClassification("bigreatereq", "biop");
		CategoriesHierarchy.addClassification("amp", "biop");
		CategoriesHierarchy.addClassification("minus", "biop");
		CategoriesHierarchy.addClassification("biandlogic", "biop");
		CategoriesHierarchy.addClassification("biorlogic", "biop");
		CategoriesHierarchy.addCategory("unop");
		CategoriesHierarchy.addClassification("star", "unop");
		CategoriesHierarchy.addClassification("uninc", "unop");
		CategoriesHierarchy.addClassification("undec", "unop");
		CategoriesHierarchy.addClassification("plus", "unop");
		CategoriesHierarchy.addClassification("unnot", "unop");
		CategoriesHierarchy.addClassification("unneg", "unop");
		CategoriesHierarchy.addClassification("minus", "unop");
		CategoriesHierarchy.addCategory("punctuation");
		CategoriesHierarchy.addClassification("semicolon", "punctuation");
		CategoriesHierarchy.addClassification("tridot", "punctuation");
		CategoriesHierarchy.addClassification("ques", "punctuation");
		CategoriesHierarchy.addClassification("comma", "punctuation");
		CategoriesHierarchy.addClassification("arrow", "punctuation");
		CategoriesHierarchy.addClassification("amp", "punctuation");
		CategoriesHierarchy.addClassification("apostrophe", "punctuation");
		CategoriesHierarchy.addClassification("colon", "punctuation");
		CategoriesHierarchy.addClassification("eq", "punctuation");
		CategoriesHierarchy.addClassification("dot", "punctuation");
		CategoriesHierarchy.addCategory("builtintype");
		CategoriesHierarchy.addClassification("short", "builtintype");
		CategoriesHierarchy.addClassification("int", "builtintype");
		CategoriesHierarchy.addClassification("double", "builtintype");
		CategoriesHierarchy.addClassification("void", "builtintype");
		CategoriesHierarchy.addClassification("float", "builtintype");
		CategoriesHierarchy.addClassification("long", "builtintype");
		CategoriesHierarchy.addClassification("char", "builtintype");
		CategoriesHierarchy.addCategory("qualifier");
		CategoriesHierarchy.addClassification("const", "qualifier");
		CategoriesHierarchy.addClassification("auto", "qualifier");
		CategoriesHierarchy.addClassification("register", "qualifier");
		CategoriesHierarchy.addClassification("unsigned", "qualifier");
		CategoriesHierarchy.addClassification("signed", "qualifier");
		CategoriesHierarchy.addClassification("static", "qualifier");
		CategoriesHierarchy.addClassification("extern", "qualifier");
		CategoriesHierarchy.addClassification("volatile", "qualifier");
		CategoriesHierarchy.addCategory("ctrlflow");
		CategoriesHierarchy.addClassification("case", "ctrlflow");
		CategoriesHierarchy.addClassification("do", "ctrlflow");
		CategoriesHierarchy.addClassification("return", "ctrlflow");
		CategoriesHierarchy.addClassification("goto", "ctrlflow");
		CategoriesHierarchy.addClassification("for", "ctrlflow");
		CategoriesHierarchy.addClassification("default", "ctrlflow");
		CategoriesHierarchy.addClassification("while", "ctrlflow");
		CategoriesHierarchy.addClassification("else", "ctrlflow");
		CategoriesHierarchy.addClassification("break", "ctrlflow");
		CategoriesHierarchy.addClassification("switch", "ctrlflow");
		CategoriesHierarchy.addClassification("continue", "ctrlflow");
		CategoriesHierarchy.addClassification("if", "ctrlflow");
		CategoriesHierarchy.addCategory("typedefine");
		CategoriesHierarchy.addClassification("union", "typedefine");
		CategoriesHierarchy.addClassification("enum", "typedefine");
		CategoriesHierarchy.addClassification("struct", "typedefine");
		CategoriesHierarchy.addCategory("keyword");
		CategoriesHierarchy.addClassification("int", "keyword");
		CategoriesHierarchy.addClassification("float", "keyword");
		CategoriesHierarchy.addClassification("while", "keyword");
		CategoriesHierarchy.addClassification("char", "keyword");
		CategoriesHierarchy.addClassification("static", "keyword");
		CategoriesHierarchy.addClassification("sizeof", "keyword");
		CategoriesHierarchy.addClassification("if", "keyword");
		CategoriesHierarchy.addClassification("const", "keyword");
		CategoriesHierarchy.addClassification("struct", "keyword");
		CategoriesHierarchy.addClassification("for", "keyword");
		CategoriesHierarchy.addClassification("union", "keyword");
		CategoriesHierarchy.addClassification("unsigned", "keyword");
		CategoriesHierarchy.addClassification("long", "keyword");
		CategoriesHierarchy.addClassification("volatile", "keyword");
		CategoriesHierarchy.addClassification("do", "keyword");
		CategoriesHierarchy.addClassification("return", "keyword");
		CategoriesHierarchy.addClassification("goto", "keyword");
		CategoriesHierarchy.addClassification("auto", "keyword");
		CategoriesHierarchy.addClassification("void", "keyword");
		CategoriesHierarchy.addClassification("enum", "keyword");
		CategoriesHierarchy.addClassification("else", "keyword");
		CategoriesHierarchy.addClassification("break", "keyword");
		CategoriesHierarchy.addClassification("extern", "keyword");
		CategoriesHierarchy.addClassification("case", "keyword");
		CategoriesHierarchy.addClassification("short", "keyword");
		CategoriesHierarchy.addClassification("default", "keyword");
		CategoriesHierarchy.addClassification("double", "keyword");
		CategoriesHierarchy.addClassification("register", "keyword");
		CategoriesHierarchy.addClassification("signed", "keyword");
		CategoriesHierarchy.addClassification("switch", "keyword");
		CategoriesHierarchy.addClassification("continue", "keyword");
		CategoriesHierarchy.addCategory("linteger");
		CategoriesHierarchy.addClassification("lhexadecimal", "linteger");
		CategoriesHierarchy.addClassification("ldecimal", "linteger");
		CategoriesHierarchy.addClassification("loctal", "linteger");
		CategoriesHierarchy.addCategory("lfloat");
		CategoriesHierarchy.addClassification("lfloat_form_c", "lfloat");
		CategoriesHierarchy.addClassification("lfloat_form_b", "lfloat");
		CategoriesHierarchy.addClassification("lfloat_form_a", "lfloat");
		CategoriesHierarchy.addCategory("literal");
		CategoriesHierarchy.addClassification("character", "literal");
		CategoriesHierarchy.addClassification("loctal", "literal");
		CategoriesHierarchy.addClassification("lstring", "literal");
		CategoriesHierarchy.addClassification("lhexadecimal", "literal");
		CategoriesHierarchy.addClassification("ldecimal", "literal");
		CategoriesHierarchy.addClassification("lfloat_form_c", "literal");
		CategoriesHierarchy.addClassification("lfloat_form_b", "literal");
		CategoriesHierarchy.addClassification("lfloat_form_a", "literal");
		CategoriesHierarchy.addKeywordCategory("lola_keyword");
		CategoriesHierarchy.addCategory("package_snippet");
		CategoriesHierarchy.addCategory("snippet");
		CategoriesHierarchy.addTriviaCategory("enter");
		Balancing.addBalancing((("{")), (("}")));
		Balancing.addBalancing((("(")), ((")")));
		Balancing.addBalancing((("[")), (("]")));
	}


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public JflexLexer(java.io.Reader in) {
    	try {
		initialize();
	} catch (CycleFoundException e) {
		e.printStackTrace();
	}
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 212) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { return new java_cup.runtime.Symbol(sym.EOF); }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { throw new Error("Illegal character <"+
yytext()+">");
            }
          case 163: break;
          case 2: 
            { return token("ldecimal");
            }
          case 164: break;
          case 3: 
            { return token("identifier");
            }
          case 165: break;
          case 4: 
            { return token("plus");
            }
          case 166: break;
          case 5: 
            { return token("minus");
            }
          case 167: break;
          case 6: 
            { Token $ = token("ignore"); yycolumn += (3 - yycolumn % 4); return $;
            }
          case 168: break;
          case 7: 
            { return token("ignore");
            }
          case 169: break;
          case 8: 
            { return token("dot");
            }
          case 170: break;
          case 9: 
            { return token("bigreater");
            }
          case 171: break;
          case 10: 
            { return token("eq");
            }
          case 172: break;
          case 11: 
            { return token("biless");
            }
          case 173: break;
          case 12: 
            { return token("star");
            }
          case 174: break;
          case 13: 
            { return token("bidiv");
            }
          case 175: break;
          case 14: 
            { return token("bimod");
            }
          case 176: break;
          case 15: 
            { return token("amp");
            }
          case 177: break;
          case 16: 
            { return token("or");
            }
          case 178: break;
          case 17: 
            { return token("bixor");
            }
          case 179: break;
          case 18: 
            { return token("unnot");
            }
          case 180: break;
          case 19: 
            { return token("unneg");
            }
          case 181: break;
          case 20: 
            { return token("semicolon");
            }
          case 182: break;
          case 21: 
            { return token("comma");
            }
          case 183: break;
          case 22: 
            { return token("apostrophe");
            }
          case 184: break;
          case 23: 
            { return token("colon");
            }
          case 185: break;
          case 24: 
            { return token("ques");
            }
          case 186: break;
          case 25: 
            { return token("opencurly");
            }
          case 187: break;
          case 26: 
            { return token("closecurly");
            }
          case 188: break;
          case 27: 
            { return token("openparen");
            }
          case 189: break;
          case 28: 
            { return token("closeparen");
            }
          case 190: break;
          case 29: 
            { return token("openbracket");
            }
          case 191: break;
          case 30: 
            { return token("closebracket");
            }
          case 192: break;
          case 31: 
            { return token("sharp");
            }
          case 193: break;
          case 32: 
            { return token("enter");
            }
          case 194: break;
          case 33: 
            { return token("lfloat_form_c");
            }
          case 195: break;
          case 34: 
            { return token("uninc");
            }
          case 196: break;
          case 35: 
            { return token("eqadd");
            }
          case 197: break;
          case 36: 
            { return token("undec");
            }
          case 198: break;
          case 37: 
            { return token("arrow");
            }
          case 199: break;
          case 38: 
            { return token("lfloat_form_b");
            }
          case 200: break;
          case 39: 
            { return token("birsh");
            }
          case 201: break;
          case 40: 
            { return token("bigreatereq");
            }
          case 202: break;
          case 41: 
            { return token("bieq");
            }
          case 203: break;
          case 42: 
            { return token("bilesseq");
            }
          case 204: break;
          case 43: 
            { return token("bilsh");
            }
          case 205: break;
          case 44: 
            { return token("diopencurly");
            }
          case 206: break;
          case 45: 
            { return token("eqmul");
            }
          case 207: break;
          case 46: 
            { return token("eqdiv");
            }
          case 208: break;
          case 47: 
            { return token("diclosecurly");
            }
          case 209: break;
          case 48: 
            { return token("eqmod");
            }
          case 210: break;
          case 49: 
            { return token("eqand");
            }
          case 211: break;
          case 50: 
            { return token("biandlogic");
            }
          case 212: break;
          case 51: 
            { return token("eqor");
            }
          case 213: break;
          case 52: 
            { return token("biorlogic");
            }
          case 214: break;
          case 53: 
            { return token("eqxor");
            }
          case 215: break;
          case 54: 
            { return token("bineq");
            }
          case 216: break;
          case 55: 
            { return token("if");
            }
          case 217: break;
          case 56: 
            { return token("do");
            }
          case 218: break;
          case 57: 
            { return token("loctal");
            }
          case 219: break;
          case 58: 
            { return token("lstring");
            }
          case 220: break;
          case 59: 
            { return token("##");
            }
          case 221: break;
          case 60: 
            { return token("lfloat_form_a");
            }
          case 222: break;
          case 61: 
            { return token("for");
            }
          case 223: break;
          case 62: 
            { return token("tridot");
            }
          case 224: break;
          case 63: 
            { return token("eqrsh");
            }
          case 225: break;
          case 64: 
            { return token("eqlsh");
            }
          case 226: break;
          case 65: 
            { return token("character");
            }
          case 227: break;
          case 66: 
            { return token("int");
            }
          case 228: break;
          case 67: 
            { return token("lhexadecimal");
            }
          case 229: break;
          case 68: 
            { return token("lola_keyword");
            }
          case 230: break;
          case 69: 
            { return token("else");
            }
          case 231: break;
          case 70: 
            { return token("enum");
            }
          case 232: break;
          case 71: 
            { return token("long");
            }
          case 233: break;
          case 72: 
            { return token("void");
            }
          case 234: break;
          case 73: 
            { return token("auto");
            }
          case 235: break;
          case 74: 
            { return token("case");
            }
          case 236: break;
          case 75: 
            { return token("char");
            }
          case 237: break;
          case 76: 
            { return token("goto");
            }
          case 238: break;
          case 77: 
            { return token("##of");
            }
          case 239: break;
          case 78: 
            { return token("##or");
            }
          case 240: break;
          case 79: 
            { return token("##If");
            }
          case 241: break;
          case 80: 
            { return token("break");
            }
          case 242: break;
          case 81: 
            { return token("float");
            }
          case 243: break;
          case 82: 
            { return token("union");
            }
          case 244: break;
          case 83: 
            { return token("short");
            }
          case 245: break;
          case 84: 
            { return token("const");
            }
          case 246: break;
          case 85: 
            { return token("while");
            }
          case 247: break;
          case 86: 
            { return token("##log");
            }
          case 248: break;
          case 87: 
            { return token("##and");
            }
          case 249: break;
          case 88: 
            { return token("##see");
            }
          case 250: break;
          case 89: 
            { return token("##run");
            }
          case 251: break;
          case 90: 
            { return token("##nor");
            }
          case 252: break;
          case 91: 
            { return token("##xor");
            }
          case 253: break;
          case 92: 
            { return token("##Not");
            }
          case 254: break;
          case 93: 
            { return token("##Any");
            }
          case 255: break;
          case 94: 
            { return token("extern");
            }
          case 256: break;
          case 95: 
            { return token("double");
            }
          case 257: break;
          case 96: 
            { return token("signed");
            }
          case 258: break;
          case 97: 
            { return token("sizeof");
            }
          case 259: break;
          case 98: 
            { return token("static");
            }
          case 260: break;
          case 99: 
            { return token("struct");
            }
          case 261: break;
          case 100: 
            { return token("switch");
            }
          case 262: break;
          case 101: 
            { return token("return");
            }
          case 263: break;
          case 102: 
            { return token("##else");
            }
          case 264: break;
          case 103: 
            { return token("##Find");
            }
          case 265: break;
          case 104: 
            { return token("##find");
            }
          case 266: break;
          case 105: 
            { return token("##note");
            }
          case 267: break;
          case 106: 
            { return token("##with");
            }
          case 268: break;
          case 107: 
            { return token("##Case");
            }
          case 269: break;
          case 108: 
            { return token("default");
            }
          case 270: break;
          case 109: 
            { return token("typedef");
            }
          case 271: break;
          case 110: 
            { return token("##Empty");
            }
          case 272: break;
          case 111: 
            { return token("##Match");
            }
          case 273: break;
          case 112: 
            { return token("unsigned");
            }
          case 274: break;
          case 113: 
            { return token("volatile");
            }
          case 275: break;
          case 114: 
            { return token("register");
            }
          case 276: break;
          case 115: 
            { return token("continue");
            }
          case 277: break;
          case 116: 
            { return token("##Either");
            }
          case 278: break;
          case 117: 
            { return token("##elseIf");
            }
          case 279: break;
          case 118: 
            { return token("##filter");
            }
          case 280: break;
          case 119: 
            { return token("##Unless");
            }
          case 281: break;
          case 120: 
            { return token("##opener");
            }
          case 282: break;
          case 121: 
            { return token("##ifNone");
            }
          case 283: break;
          case 122: 
            { return token("##delete");
            }
          case 284: break;
          case 123: 
            { return token("##assert");
            }
          case 285: break;
          case 124: 
            { return token("##anchor");
            }
          case 286: break;
          case 125: 
            { return token("##append");
            }
          case 287: break;
          case 126: 
            { return token("##closer");
            }
          case 288: break;
          case 127: 
            { return token("##Xither");
            }
          case 289: break;
          case 128: 
            { return token("##Import");
            }
          case 290: break;
          case 129: 
            { return token("##Splice");
            }
          case 291: break;
          case 130: 
            { return token("##example");
            }
          case 292: break;
          case 131: 
            { return token("##ForEach");
            }
          case 293: break;
          case 132: 
            { return token("##Literal");
            }
          case 294: break;
          case 133: 
            { return token("##andAlso");
            }
          case 295: break;
          case 134: 
            { return token("##replace");
            }
          case 296: break;
          case 135: 
            { return token("##without");
            }
          case 297: break;
          case 136: 
            { return token("##prepend");
            }
          case 298: break;
          case 137: 
            { return token("##Include");
            }
          case 299: break;
          case 138: 
            { return token("##Neither");
            }
          case 300: break;
          case 139: 
            { return token("##NewLine");
            }
          case 301: break;
          case 140: 
            { return token("##Nothing");
            }
          case 302: break;
          case 141: 
            { return tokenWithSnippet("lola_keyword");
            }
          case 303: break;
          case 142: 
            { return token("##Sequence");
            }
          case 304: break;
          case 143: 
            { return token("##SubsetOf");
            }
          case 305: break;
          case 144: 
            { return token("##SameLine");
            }
          case 306: break;
          case 145: 
            { return token("##Optional");
            }
          case 307: break;
          case 146: 
            { return token("##EndOfFile");
            }
          case 308: break;
          case 147: 
            { return token("##EndOfLine");
            }
          case 309: break;
          case 148: 
            { return token("##exceptFor");
            }
          case 310: break;
          case 149: 
            { return token("##otherwise");
            }
          case 311: break;
          case 150: 
            { return token("##separator");
            }
          case 312: break;
          case 151: 
            { return token("##resultsIn");
            }
          case 313: break;
          case 152: 
            { return token("##OneOrMore");
            }
          case 314: break;
          case 153: 
            { return token("##followedBy");
            }
          case 315: break;
          case 154: 
            { return token("##Unbalanced");
            }
          case 316: break;
          case 155: 
            { return token("##Identifier");
            }
          case 317: break;
          case 156: 
            { return token("##NoneOrMore");
            }
          case 318: break;
          case 157: 
            { return token("##description");
            }
          case 319: break;
          case 158: 
            { return token("##PermutationOf");
            }
          case 320: break;
          case 159: 
            { return token("##SomeIdentifier");
            }
          case 321: break;
          case 160: 
            { return token("##ProperSubsetOf");
            }
          case 322: break;
          case 161: 
            { return token("##BeginningOfLine");
            }
          case 323: break;
          case 162: 
            { return token("##NonEmptySubsetOf");
            }
          case 324: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
