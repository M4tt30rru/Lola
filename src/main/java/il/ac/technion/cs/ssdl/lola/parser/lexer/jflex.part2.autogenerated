public final static String lolaEscapingCharacter = "##";
	public static void initialize() throws CycleFoundException {
		if(initialized)
			return;
		initialized = true;
		CategoriesHierarchy.addTriviaCategory("ignore");
		CategoriesHierarchy.addCategory("tridot");
		CategoriesHierarchy.addCategory("eqrsh");
		CategoriesHierarchy.addCategory("eqlsh");
		CategoriesHierarchy.addCategory("eqadd");
		CategoriesHierarchy.addCategory("eqmul");
		CategoriesHierarchy.addCategory("eqdiv");
		CategoriesHierarchy.addCategory("eqmod");
		CategoriesHierarchy.addCategory("eqand");
		CategoriesHierarchy.addCategory("eqor");
		CategoriesHierarchy.addCategory("eqxor");
		CategoriesHierarchy.addCategory("birsh");
		CategoriesHierarchy.addCategory("bilsh");
		CategoriesHierarchy.addCategory("plus");
		CategoriesHierarchy.addCategory("minus");
		CategoriesHierarchy.addCategory("uninc");
		CategoriesHierarchy.addCategory("undec");
		CategoriesHierarchy.addCategory("biandlogic");
		CategoriesHierarchy.addCategory("biorlogic");
		CategoriesHierarchy.addCategory("bilesseq");
		CategoriesHierarchy.addCategory("bigreatereq");
		CategoriesHierarchy.addCategory("bieq");
		CategoriesHierarchy.addCategory("bineq");
		CategoriesHierarchy.addCategory("or");
		CategoriesHierarchy.addCategory("bixor");
		CategoriesHierarchy.addCategory("bimod");
		CategoriesHierarchy.addCategory("bigreater");
		CategoriesHierarchy.addCategory("biless");
		CategoriesHierarchy.addCategory("bidiv");
		CategoriesHierarchy.addCategory("star");
		CategoriesHierarchy.addCategory("amp");
		CategoriesHierarchy.addCategory("unnot");
		CategoriesHierarchy.addCategory("unneg");
		CategoriesHierarchy.addCategory("semicolon");
		CategoriesHierarchy.addCategory("comma");
		CategoriesHierarchy.addCategory("apostrophe");
		CategoriesHierarchy.addCategory("colon");
		CategoriesHierarchy.addCategory("dot");
		CategoriesHierarchy.addCategory("arrow");
		CategoriesHierarchy.addCategory("eq");
		CategoriesHierarchy.addCategory("ques");
		CategoriesHierarchy.addCategory("diopencurly");
		CategoriesHierarchy.addCategory("opencurly");
		CategoriesHierarchy.addCategory("diclosecurly");
		CategoriesHierarchy.addCategory("closecurly");
		CategoriesHierarchy.addCategory("openparen");
		CategoriesHierarchy.addCategory("closeparen");
		CategoriesHierarchy.addCategory("openbracket");
		CategoriesHierarchy.addCategory("closebracket");
		CategoriesHierarchy.addCategory("void");
		CategoriesHierarchy.addCategory("float");
		CategoriesHierarchy.addCategory("short");
		CategoriesHierarchy.addCategory("char");
		CategoriesHierarchy.addCategory("double");
		CategoriesHierarchy.addCategory("int");
		CategoriesHierarchy.addCategory("long");
		CategoriesHierarchy.addCategory("auto");
		CategoriesHierarchy.addCategory("const");
		CategoriesHierarchy.addCategory("extern");
		CategoriesHierarchy.addCategory("register");
		CategoriesHierarchy.addCategory("signed");
		CategoriesHierarchy.addCategory("static");
		CategoriesHierarchy.addCategory("unsigned");
		CategoriesHierarchy.addCategory("volatile");
		CategoriesHierarchy.addCategory("break");
		CategoriesHierarchy.addCategory("case");
		CategoriesHierarchy.addCategory("continue");
		CategoriesHierarchy.addCategory("default");
		CategoriesHierarchy.addCategory("do");
		CategoriesHierarchy.addCategory("else");
		CategoriesHierarchy.addCategory("for");
		CategoriesHierarchy.addCategory("goto");
		CategoriesHierarchy.addCategory("if");
		CategoriesHierarchy.addCategory("return");
		CategoriesHierarchy.addCategory("switch");
		CategoriesHierarchy.addCategory("while");
		CategoriesHierarchy.addCategory("enum");
		CategoriesHierarchy.addCategory("class");
		CategoriesHierarchy.addCategory("interface");
		CategoriesHierarchy.addCategory("typedef");
		CategoriesHierarchy.addCategory("sizeof");
		CategoriesHierarchy.addCategory("lhexadecimal");
		CategoriesHierarchy.addCategory("loctal");
		CategoriesHierarchy.addCategory("ldecimal");
		CategoriesHierarchy.addCategory("lfloat_form_a");
		CategoriesHierarchy.addCategory("lfloat_form_b");
		CategoriesHierarchy.addCategory("lfloat_form_c");
		CategoriesHierarchy.addCategory("lstring");
		CategoriesHierarchy.addCategory("identifier");
		CategoriesHierarchy.addCategory("character");
		CategoriesHierarchy.addCategory("sharp");
		CategoriesHierarchy.addKeywordCategory("##and");
		CategoriesHierarchy.addKeywordCategory("##anchor");
		CategoriesHierarchy.addKeywordCategory("##NewLine");
		CategoriesHierarchy.addKeywordCategory("##replace");
		CategoriesHierarchy.addKeywordCategory("##see");
		CategoriesHierarchy.addKeywordCategory("##SomeIdentifier");
		CategoriesHierarchy.addKeywordCategory("##run");
		CategoriesHierarchy.addKeywordCategory("##Neither");
		CategoriesHierarchy.addKeywordCategory("##Include");
		CategoriesHierarchy.addKeywordCategory("##find");
		CategoriesHierarchy.addKeywordCategory("##Empty");
		CategoriesHierarchy.addKeywordCategory("##Unbalanced");
		CategoriesHierarchy.addKeywordCategory("##closer");
		CategoriesHierarchy.addKeywordCategory("##exceptFor");
		CategoriesHierarchy.addKeywordCategory("##delete");
		CategoriesHierarchy.addKeywordCategory("##Unless");
		CategoriesHierarchy.addKeywordCategory("##andAlso");
		CategoriesHierarchy.addKeywordCategory("##Import");
		CategoriesHierarchy.addKeywordCategory("##log");
		CategoriesHierarchy.addKeywordCategory("##Find");
		CategoriesHierarchy.addKeywordCategory("##prepend");
		CategoriesHierarchy.addKeywordCategory("##note");
		CategoriesHierarchy.addKeywordCategory("##opener");
		CategoriesHierarchy.addKeywordCategory("##Match");
		CategoriesHierarchy.addKeywordCategory("##Splice");
		CategoriesHierarchy.addKeywordCategory("##example");
		CategoriesHierarchy.addKeywordCategory("##Nothing");
		CategoriesHierarchy.addKeywordCategory("##SameLine");
		CategoriesHierarchy.addKeywordCategory("##PermutationOf");
		CategoriesHierarchy.addKeywordCategory("##Optional");
		CategoriesHierarchy.addKeywordCategory("##Case");
		CategoriesHierarchy.addKeywordCategory("##followedBy");
		CategoriesHierarchy.addKeywordCategory("##xor");
		CategoriesHierarchy.addKeywordCategory("##ProperSubsetOf");
		CategoriesHierarchy.addKeywordCategory("##description");
		CategoriesHierarchy.addKeywordCategory("##resultsIn");
		CategoriesHierarchy.addKeywordCategory("##append");
		CategoriesHierarchy.addKeywordCategory("##else");
		CategoriesHierarchy.addKeywordCategory("##assert");
		CategoriesHierarchy.addKeywordCategory("##Not");
		CategoriesHierarchy.addKeywordCategory("##Xither");
		CategoriesHierarchy.addKeywordCategory("##EndOfFile");
		CategoriesHierarchy.addKeywordCategory("##NoneOrMore");
		CategoriesHierarchy.addKeywordCategory("##Either");
		CategoriesHierarchy.addKeywordCategory("##If");
		CategoriesHierarchy.addKeywordCategory("##elseIf");
		CategoriesHierarchy.addKeywordCategory("##SubsetOf");
		CategoriesHierarchy.addKeywordCategory("##Literal");
		CategoriesHierarchy.addKeywordCategory("##Identifier");
		CategoriesHierarchy.addKeywordCategory("##with");
		CategoriesHierarchy.addKeywordCategory("##nor");
		CategoriesHierarchy.addKeywordCategory("##BeginningOfLine");
		CategoriesHierarchy.addKeywordCategory("##NonEmptySubsetOf");
		CategoriesHierarchy.addKeywordCategory("##ifNone");
		CategoriesHierarchy.addKeywordCategory("##Sequence");
		CategoriesHierarchy.addKeywordCategory("##of");
		CategoriesHierarchy.addKeywordCategory("##OneOrMore");
		CategoriesHierarchy.addKeywordCategory("##or");
		CategoriesHierarchy.addKeywordCategory("##filter");
		CategoriesHierarchy.addKeywordCategory("##without");
		CategoriesHierarchy.addKeywordCategory("##separator");
		CategoriesHierarchy.addKeywordCategory("##ForEach");
		CategoriesHierarchy.addKeywordCategory("##otherwise");
		CategoriesHierarchy.addKeywordCategory("##Any");
		CategoriesHierarchy.addKeywordCategory("##EndOfLine");
		CategoriesHierarchy.addKeywordCategory("##");
		CategoriesHierarchy.addCategory("eqop");
		CategoriesHierarchy.addClassification("eqor", "eqop");
		CategoriesHierarchy.addClassification("eqdiv", "eqop");
		CategoriesHierarchy.addClassification("eqrsh", "eqop");
		CategoriesHierarchy.addClassification("eqxor", "eqop");
		CategoriesHierarchy.addClassification("eqlsh", "eqop");
		CategoriesHierarchy.addClassification("eqmul", "eqop");
		CategoriesHierarchy.addClassification("eqand", "eqop");
		CategoriesHierarchy.addClassification("eqadd", "eqop");
		CategoriesHierarchy.addClassification("eqmod", "eqop");
		CategoriesHierarchy.addCategory("biop");
		CategoriesHierarchy.addClassification("bigreater", "biop");
		CategoriesHierarchy.addClassification("or", "biop");
		CategoriesHierarchy.addClassification("star", "biop");
		CategoriesHierarchy.addClassification("biless", "biop");
		CategoriesHierarchy.addClassification("bilesseq", "biop");
		CategoriesHierarchy.addClassification("birsh", "biop");
		CategoriesHierarchy.addClassification("bixor", "biop");
		CategoriesHierarchy.addClassification("bimod", "biop");
		CategoriesHierarchy.addClassification("bieq", "biop");
		CategoriesHierarchy.addClassification("bilsh", "biop");
		CategoriesHierarchy.addClassification("bineq", "biop");
		CategoriesHierarchy.addClassification("bidiv", "biop");
		CategoriesHierarchy.addClassification("plus", "biop");
		CategoriesHierarchy.addClassification("bigreatereq", "biop");
		CategoriesHierarchy.addClassification("amp", "biop");
		CategoriesHierarchy.addClassification("minus", "biop");
		CategoriesHierarchy.addClassification("biandlogic", "biop");
		CategoriesHierarchy.addClassification("biorlogic", "biop");
		CategoriesHierarchy.addCategory("unop");
		CategoriesHierarchy.addClassification("star", "unop");
		CategoriesHierarchy.addClassification("uninc", "unop");
		CategoriesHierarchy.addClassification("undec", "unop");
		CategoriesHierarchy.addClassification("plus", "unop");
		CategoriesHierarchy.addClassification("unnot", "unop");
		CategoriesHierarchy.addClassification("unneg", "unop");
		CategoriesHierarchy.addClassification("minus", "unop");
		CategoriesHierarchy.addCategory("punctuation");
		CategoriesHierarchy.addClassification("semicolon", "punctuation");
		CategoriesHierarchy.addClassification("tridot", "punctuation");
		CategoriesHierarchy.addClassification("ques", "punctuation");
		CategoriesHierarchy.addClassification("comma", "punctuation");
		CategoriesHierarchy.addClassification("arrow", "punctuation");
		CategoriesHierarchy.addClassification("amp", "punctuation");
		CategoriesHierarchy.addClassification("apostrophe", "punctuation");
		CategoriesHierarchy.addClassification("colon", "punctuation");
		CategoriesHierarchy.addClassification("eq", "punctuation");
		CategoriesHierarchy.addClassification("dot", "punctuation");
		CategoriesHierarchy.addCategory("JavaType");
		CategoriesHierarchy.addClassification("short", "JavaType");
		CategoriesHierarchy.addClassification("int", "JavaType");
		CategoriesHierarchy.addClassification("double", "JavaType");
		CategoriesHierarchy.addClassification("void", "JavaType");
		CategoriesHierarchy.addClassification("float", "JavaType");
		CategoriesHierarchy.addClassification("long", "JavaType");
		CategoriesHierarchy.addClassification("char", "JavaType");
		CategoriesHierarchy.addCategory("qualifier");
		CategoriesHierarchy.addClassification("const", "qualifier");
		CategoriesHierarchy.addClassification("auto", "qualifier");
		CategoriesHierarchy.addClassification("register", "qualifier");
		CategoriesHierarchy.addClassification("unsigned", "qualifier");
		CategoriesHierarchy.addClassification("signed", "qualifier");
		CategoriesHierarchy.addClassification("static", "qualifier");
		CategoriesHierarchy.addClassification("extern", "qualifier");
		CategoriesHierarchy.addClassification("volatile", "qualifier");
		CategoriesHierarchy.addCategory("ctrlflow");
		CategoriesHierarchy.addClassification("case", "ctrlflow");
		CategoriesHierarchy.addClassification("do", "ctrlflow");
		CategoriesHierarchy.addClassification("return", "ctrlflow");
		CategoriesHierarchy.addClassification("goto", "ctrlflow");
		CategoriesHierarchy.addClassification("for", "ctrlflow");
		CategoriesHierarchy.addClassification("default", "ctrlflow");
		CategoriesHierarchy.addClassification("while", "ctrlflow");
		CategoriesHierarchy.addClassification("else", "ctrlflow");
		CategoriesHierarchy.addClassification("break", "ctrlflow");
		CategoriesHierarchy.addClassification("switch", "ctrlflow");
		CategoriesHierarchy.addClassification("continue", "ctrlflow");
		CategoriesHierarchy.addClassification("if", "ctrlflow");
		CategoriesHierarchy.addCategory("TypeKeyword");
		CategoriesHierarchy.addClassification("interface", "TypeKeyword");
		CategoriesHierarchy.addClassification("enum", "TypeKeyword");
		CategoriesHierarchy.addClassification("class", "TypeKeyword");
		CategoriesHierarchy.addCategory("keyword");
		CategoriesHierarchy.addClassification("int", "keyword");
		CategoriesHierarchy.addClassification("float", "keyword");
		CategoriesHierarchy.addClassification("while", "keyword");
		CategoriesHierarchy.addClassification("char", "keyword");
		CategoriesHierarchy.addClassification("interface", "keyword");
		CategoriesHierarchy.addClassification("static", "keyword");
		CategoriesHierarchy.addClassification("sizeof", "keyword");
		CategoriesHierarchy.addClassification("if", "keyword");
		CategoriesHierarchy.addClassification("const", "keyword");
		CategoriesHierarchy.addClassification("for", "keyword");
		CategoriesHierarchy.addClassification("unsigned", "keyword");
		CategoriesHierarchy.addClassification("long", "keyword");
		CategoriesHierarchy.addClassification("volatile", "keyword");
		CategoriesHierarchy.addClassification("do", "keyword");
		CategoriesHierarchy.addClassification("return", "keyword");
		CategoriesHierarchy.addClassification("goto", "keyword");
		CategoriesHierarchy.addClassification("auto", "keyword");
		CategoriesHierarchy.addClassification("void", "keyword");
		CategoriesHierarchy.addClassification("enum", "keyword");
		CategoriesHierarchy.addClassification("else", "keyword");
		CategoriesHierarchy.addClassification("break", "keyword");
		CategoriesHierarchy.addClassification("extern", "keyword");
		CategoriesHierarchy.addClassification("class", "keyword");
		CategoriesHierarchy.addClassification("case", "keyword");
		CategoriesHierarchy.addClassification("short", "keyword");
		CategoriesHierarchy.addClassification("default", "keyword");
		CategoriesHierarchy.addClassification("double", "keyword");
		CategoriesHierarchy.addClassification("register", "keyword");
		CategoriesHierarchy.addClassification("signed", "keyword");
		CategoriesHierarchy.addClassification("switch", "keyword");
		CategoriesHierarchy.addClassification("continue", "keyword");
		CategoriesHierarchy.addCategory("linteger");
		CategoriesHierarchy.addClassification("lhexadecimal", "linteger");
		CategoriesHierarchy.addClassification("ldecimal", "linteger");
		CategoriesHierarchy.addClassification("loctal", "linteger");
		CategoriesHierarchy.addCategory("lfloat");
		CategoriesHierarchy.addClassification("lfloat_form_c", "lfloat");
		CategoriesHierarchy.addClassification("lfloat_form_b", "lfloat");
		CategoriesHierarchy.addClassification("lfloat_form_a", "lfloat");
		CategoriesHierarchy.addCategory("literal");
		CategoriesHierarchy.addClassification("character", "literal");
		CategoriesHierarchy.addClassification("loctal", "literal");
		CategoriesHierarchy.addClassification("lstring", "literal");
		CategoriesHierarchy.addClassification("lhexadecimal", "literal");
		CategoriesHierarchy.addClassification("ldecimal", "literal");
		CategoriesHierarchy.addClassification("lfloat_form_c", "literal");
		CategoriesHierarchy.addClassification("lfloat_form_b", "literal");
		CategoriesHierarchy.addClassification("lfloat_form_a", "literal");
		CategoriesHierarchy.addKeywordCategory("lola_keyword");
		CategoriesHierarchy.addCategory("package_snippet");
		CategoriesHierarchy.addCategory("snippet");
		CategoriesHierarchy.addTriviaCategory("enter");
		Balancing.addBalancing((("{")), (("}")));
		Balancing.addBalancing((("(")), ((")")));
		Balancing.addBalancing((("[")), (("]")));
	}
%}
D = (([0-9]))
L = (((([A-Z]))|(([a-z]))|(("_"))))
H = (((([A-F]))|(([a-f]))|(([0-9]))))
E = (((([eE]))(((("+"))|(("-")))?)(({D})+)))
FS = (((([fF]))|(([lL]))))
LS = (([lL]))
LLS = (((({LS}))(({LS}))))
NS = ((""))
UIS = (([uU]))
ULS = (((((({UIS}))(({LS}))))|(((({LS}))(({UIS}))))))
ULLS = (((((({UIS}))(({LLS}))))|(((({LLS}))(({UIS}))))))
US = (((({UIS}))|(({ULS}))|(({ULLS}))))
IS = (((({US}))|(({LS}))|(({LLS}))|(({NS}))))
WS = ((((\t))|((\v))|((" "))))
