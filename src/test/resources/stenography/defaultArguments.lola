##Import "std.lola"
##Find(DefaultableArgumentDeclaration)
 ##Either ##ArgumentDeclaration(dec) ##or ##ArgumentDeclaration(dec) = ##Expression(value)
##Find ##Type (t) ##Identifier(n) (##NoneOrMore ##DefaultableArgumentDeclaration(dec) ##separator ,) ##Block(block)
 ##replace ##ForEach([i for i, d in enumerate(decs) if hasattr(d, 'value')] + [len(decs)]) ##(t) ##(n) (##(','.join(d.dec.name for d in decs[:_]))) ##(block.name if _ == len(decs) else '{return ' + n.name + '(' + ','.join(d.dec.n.name for d in decs[:_]) + ',' + ','.join(d.value.name for d in decs[_:]) + ');}')

int f(int a, int b, int c=1, int d=a+b) {
 return a + b * c - d;
}
